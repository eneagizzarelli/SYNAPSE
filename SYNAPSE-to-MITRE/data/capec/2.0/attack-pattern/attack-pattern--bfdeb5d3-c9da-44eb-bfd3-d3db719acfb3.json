{
    "id": "bundle--75524afe-dbb9-418c-aabc-349d52c10557",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.",
            "external_references": [
                {
                    "external_id": "CAPEC-88",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/88.html"
                },
                {
                    "external_id": "CWE-78",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/78.html"
                },
                {
                    "external_id": "CWE-88",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/88.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-697",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html"
                },
                {
                    "description": "OS Commanding",
                    "external_id": "31",
                    "source_name": "WASC",
                    "url": "http://projects.webappsec.org/OS-Commanding"
                },
                {
                    "description": "Secunia Advisory SA16869: Firefox Command Line URL Shell Command Injection, Secunia Advisories, 2005--09---20, Secunia",
                    "external_id": "REF-543",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://secunia.com/advisories/16869/"
                }
            ],
            "id": "attack-pattern--bfdeb5d3-c9da-44eb-bfd3-d3db719acfb3",
            "modified": "2021-06-24T00:00:00.000Z",
            "name": "OS Command Injection",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--2fb2b2b8-b7de-45a2-aadb-5849d12fda8f"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges",
                    "Bypass Protection Mechanism"
                ],
                "Authorization": [
                    "Gain Privileges",
                    "Bypass Protection Mechanism"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Gain Privileges",
                    "Bypass Protection Mechanism",
                    "Read Data"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line.</xhtml:p>\n               <xhtml:p>An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data.</xhtml:p>See also: A vulnerability in Mozilla Firefox 1.x browser allows an attacker to execute arbitrary commands on the UNIX/Linux operating system. The vulnerability is caused due to the shell script used to launch Firefox parsing shell commands that are enclosed within back-ticks in the URL provided via the command line. This can be exploited to execute arbitrary shell commands by tricking a user into following a malicious link in an external application which uses Firefox as the default browser (e.g. the mail client Evolution on Red Hat Enterprise Linux 4)."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify inputs for OS commands: </b>The attacker determines user controllable input that gets passed as part of a command to the underlying operating system.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</td></tr><tr><td>TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.</td></tr><tr><td>Induce errors to find informative error messages</td></tr></tbody></table><li> <p> <b>Survey the Application: </b>The attacker surveys the target application, possibly as a valid and authenticated user</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Spidering web sites for all available links</td></tr><tr><td>Inventory all application inputs</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Vary inputs, looking for malicious results.: </b>Depending on whether the application being exploited is a remote or local one the attacker crafts the appropriate malicious input, containing OS commands, to be passed to the application</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)</td></tr><tr><td>Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Execute malicious commands: </b>The attacker may steal information, install a back door access mechanism, elevate privileges or compromise the system in some other way.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>The attacker executes a command that stores sensitive information into a location where they can retrieve it later (perhaps using a different command injection).</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "User controllable input used as part of commands to the underlying operating system."
            ],
            "x_capec_skills_required": {
                "High": "The attacker needs to have knowledge of not only the application to exploit but also the exact nature of commands that pertain to the target operating system. This may involve, though not always, knowledge of specific assembly commands for the platform."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}