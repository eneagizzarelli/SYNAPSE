{
    "id": "bundle--2bc34deb-cfd0-47d7-813f-f6c8bed257cd",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.",
            "external_references": [
                {
                    "external_id": "CAPEC-76",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/76.html"
                },
                {
                    "external_id": "CWE-23",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/23.html"
                },
                {
                    "external_id": "CWE-22",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/22.html"
                },
                {
                    "external_id": "CWE-73",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/73.html"
                },
                {
                    "external_id": "CWE-77",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/77.html"
                },
                {
                    "external_id": "CWE-346",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/346.html"
                },
                {
                    "external_id": "CWE-348",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/348.html"
                },
                {
                    "external_id": "CWE-285",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/285.html"
                },
                {
                    "external_id": "CWE-272",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/272.html"
                },
                {
                    "external_id": "CWE-59",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/59.html"
                },
                {
                    "external_id": "CWE-74",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html"
                },
                {
                    "external_id": "CWE-15",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/15.html"
                },
                {
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1",
                    "source_name": "reference_from_CAPEC"
                }
            ],
            "id": "attack-pattern--36fd3642-e601-4392-b25b-48df2fdecf62",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Manipulating Web Input to File System Calls",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--faf0ec21-da60-4efc-8c8e-7a6b63bea170"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Confidentiality": [
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file.</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"attack\">http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd</xhtml:div>\n               <xhtml:p>However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string.</xhtml:p>\n               <xhtml:p>Then an attacker creates special payloads to bypass this filter:</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"attack\">http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd</xhtml:div>\n               <xhtml:p>When the application gets this input string, it will be the desired vector by the attacker.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Fingerprinting of the operating system: </b>In order to create a valid file injection, the attacker needs to know what the underlying OS is so that the proper file seperator is used.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</td></tr><tr><td>TCP/IP Fingerprinting. The attacker uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.</td></tr><tr><td>Induce errors to find informative error messages</td></tr></tbody></table><li> <p> <b>Survey the Application to Identify User-controllable Inputs: </b>The attacker surveys the target application to identify all user-controllable inputs, possibly as a valid and authenticated user</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Spider web sites for all available links, entry points to the web site.</td></tr><tr><td>Manually explore application and inventory all application inputs</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Vary inputs, looking for malicious results: </b>Depending on whether the application being exploited is a remote or local one, the attacker crafts the appropriate malicious input containing the path of the targeted file or other file system control syntax to be passed to the application</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Inject context-appropriate malicious file path using network packet injection tools (netcat, nemesis, etc.)</td></tr><tr><td>Inject context-appropriate malicious file path using web test frameworks (proxies, TamperData, custom programs, etc.) or simple HTTP requests</td></tr><tr><td>Inject context-appropriate malicious file system control syntax</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Manipulate files accessible by the application: </b>The attacker may steal information or directly manipulate files (delete, copy, flush, etc.)</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>The attacker injects context-appropriate malicious file path to access the content of the targeted file.</td></tr><tr><td>The attacker injects context-appropriate malicious file system control syntax to access the content of the targeted file.</td></tr><tr><td>The attacker injects context-appropriate malicious file path to cause the application to create, delete a targeted file.</td></tr><tr><td>The attacker injects context-appropriate malicious file system control syntax to cause the application to create, delete a targeted file.</td></tr><tr><td>The attacker injects context-appropriate malicious file path in order to manipulate the meta-data of the targeted file.</td></tr><tr><td>The attacker injects context-appropriate malicious file system control syntax in order to manipulate the meta-data of the targeted file.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "Program must allow for user controlled variables to be applied directly to the filesystem"
            ],
            "x_capec_skills_required": {
                "Low": "To identify file system entry point and execute against an over-privileged system interface"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}