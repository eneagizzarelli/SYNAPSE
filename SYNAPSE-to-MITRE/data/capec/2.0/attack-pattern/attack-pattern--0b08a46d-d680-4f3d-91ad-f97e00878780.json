{
    "id": "bundle--5e35451a-bdcf-469a-b35e-217164fc7416",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to \"Log Injection-Tampering-Forging\" except that in this case, the attack is targeting the logs of the web server and not the application.",
            "external_references": [
                {
                    "external_id": "CAPEC-81",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/81.html"
                },
                {
                    "external_id": "CWE-117",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/117.html"
                },
                {
                    "external_id": "CWE-93",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/93.html"
                },
                {
                    "external_id": "CWE-75",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/75.html"
                },
                {
                    "external_id": "CWE-221",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/221.html"
                },
                {
                    "external_id": "CWE-96",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/96.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-150",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/150.html"
                },
                {
                    "external_id": "CWE-276",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/276.html"
                },
                {
                    "external_id": "CWE-279",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/279.html"
                },
                {
                    "external_id": "CWE-116",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/116.html"
                },
                {
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1",
                    "source_name": "reference_from_CAPEC"
                }
            ],
            "id": "attack-pattern--0b08a46d-d680-4f3d-91ad-f97e00878780",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Web Server Logs Tampering",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--b3eaa7aa-9601-406c-ae82-0a0e2ea16116"
            ],
            "x_capec_consequences": {
                "Integrity": [
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "Most web servers have a public interface, even if the majority of the site is password protected, there is usually at least a login site and brochureware that is publicly available. HTTP requests to the site are also generally logged to a Web log. From an attacker point of view, standard HTTP requests containing a malicious payload can be sent to the public website (with no other access required), when those requests appear in the log (such as http://victimsite/index.html?< malicious script> if they are followed by an administrator this may be sufficient to probe the administrator's host or local network."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Determine Application Web Server Log File Format: </b>The attacker observes the system and looks for indicators of which logging utility is being used by the web server.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Determine logging utility being used by application web server (e.g. log4j), only possible if the application is known by the attacker or if the application returns error messages with logging utility information.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Determine Injectable Content: </b>The attacker launches various logged actions with malicious data to determine what sort of log injection is possible.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Attacker triggers logged actions with maliciously crafted data as inputs, parameters, arguments, etc.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Manipulate Log Files: </b>The attacker alters the log contents either directly through manipulation or forging or indirectly through injection of specially crafted request that the web server will receive and write into the logs. This type of attack typically follows another attack and is used to try to cover the traces of the previous attack.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>\n                  <xhtml:p>Indirectly through injection, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.</xhtml:p>\n                  <xhtml:p>For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters.</xhtml:p>\n               </td></tr><tr><td>\n                  <xhtml:p>Directly through log file or database manipulation, use carriage return and/or line feed characters to start a new line in the log file, and then, add a fake entry.</xhtml:p>\n                  <xhtml:p>For example: The HTTP request for \"/index.html%0A%0DIP_ADDRESS- - DATE_FORMAT] \"GET /forged-path HTTP/1.1\" 200 - \"-\" USER_AGENT\" may add the log line into Apache \"access_log\" (for example). Different applications may require different encodings of the carriage return and line feed characters.</xhtml:p>\n               </td></tr><tr><td>Directly through log file or database manipulation, modify existing log entries.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "Target server software must be a HTTP server that performs web logging."
            ],
            "x_capec_resources_required": [
                "Ability to send specially formatted HTTP request to web server"
            ],
            "x_capec_skills_required": {
                "Low": "To input faked entries into Web logs"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}