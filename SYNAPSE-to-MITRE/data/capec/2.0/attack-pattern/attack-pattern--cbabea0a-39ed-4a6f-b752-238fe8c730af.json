{
    "id": "bundle--25b001ee-3b52-4210-8da6-d6175d61e9bf",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.",
            "external_references": [
                {
                    "external_id": "CAPEC-135",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/135.html"
                },
                {
                    "external_id": "CWE-134",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/134.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-74",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html"
                },
                {
                    "description": "Format string attack",
                    "source_name": "OWASP Attacks",
                    "url": "https://owasp.org/www-community/attacks/Format_string_attack"
                },
                {
                    "description": "Hal Burch, Brendan Saulsbury, FIO30-C. Exclude user input from format strings, 2011--05, CERT",
                    "external_id": "REF-14",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.securecoding.cert.org/confluence/display/seccode/FIO30-C.+Exclude+user+input+from+format+strings"
                },
                {
                    "description": "Robert Auger, WASC Threat Classification 2.0, The Web Application Security Consortium (WASC)",
                    "external_id": "REF-15",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://projects.webappsec.org/Format-String"
                },
                {
                    "description": "OWASP Web Security Testing Guide, The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-616",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/13-Testing_for_Format_String_Injection.html"
                }
            ],
            "id": "attack-pattern--cbabea0a-39ed-4a6f-b752-238fe8c730af",
            "modified": "2021-06-24T00:00:00.000Z",
            "name": "Format String Injection",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--cde07b71-23e6-418d-93e9-665f5f83b032"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Bypass Protection Mechanism"
                ],
                "Confidentiality": [
                    "Read Data"
                ],
                "Integrity": [
                    "Modify Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "Untrusted search path vulnerability in the add_filename_to_string function in intl/gettext/loadmsgcat.c for Elinks 0.11.1 allows local users to cause Elinks to use an untrusted gettext message catalog (.po file) in a \"../po\" directory, which can be leveraged to conduct format string attacks. See also: CVE-2007-2027"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey application: </b>The adversary takes an inventory of the entry points of the application.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Spider web sites for all available links</td></tr><tr><td>List parameters, external variables, configuration files variables, etc. that are possibly used by the application.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Determine user-controllable input susceptible to format string injection: </b>Determine the user-controllable input susceptible to format string injection. For each user-controllable input that the adversary suspects is vulnerable to format string injection, attempt to inject formatting characters such as %n, %s, etc.. The goal is to manipulate the string creation using these formatting characters.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Inject probe payload which contains formatting characters (%s, %d, %n, etc.) through input parameters.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Try to exploit the Format String Injection vulnerability: </b>After determining that a given input is vulnerable to format string injection, hypothesize what the underlying usage looks like and the associated constraints.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Insert various formatting characters to read or write the memory, e.g. overwrite return address, etc.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_parent_of_refs": [
                "attack-pattern--4cd18074-15c1-4206-8391-115685669623"
            ],
            "x_capec_prerequisites": [
                "The target application must accept a strings as user input, fail to sanitize string formatting characters in the user input, and process this string using functions that interpret string formatting characters."
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack."
            ],
            "x_capec_skills_required": {
                "High": "In order to discover format string vulnerabilities it takes only low skill, however, converting this discovery into a working exploit requires advanced knowledge on the part of the adversary."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}