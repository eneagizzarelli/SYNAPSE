{
    "id": "bundle--da5d06ff-2814-4068-a0e7-84b912113775",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.",
            "external_references": [
                {
                    "external_id": "CAPEC-45",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/45.html"
                },
                {
                    "external_id": "CWE-120",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/120.html"
                },
                {
                    "external_id": "CWE-285",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/285.html"
                },
                {
                    "external_id": "CWE-302",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/302.html"
                },
                {
                    "external_id": "CWE-118",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/118.html"
                },
                {
                    "external_id": "CWE-119",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/119.html"
                },
                {
                    "external_id": "CWE-74",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-680",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/680.html"
                },
                {
                    "external_id": "CWE-697",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html"
                },
                {
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1",
                    "source_name": "reference_from_CAPEC"
                }
            ],
            "id": "attack-pattern--5d5ff43b-cbe7-4986-bfec-cf979f97e6b9",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Buffer Overflow via Symbolic Links",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--77e51461-7843-411c-a90e-852498957f76"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target application: </b>The adversary identifies a target application or program that might load in certain files to memory.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Find injection vector: </b>The adversary identifies an injection vector to deliver the excessive content to the targeted application's buffer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>The adversary creates or modifies a symbolic link pointing to those files which contain an excessive amount of data. If creating a symbolic link to one of those files causes different behavior in the application, then an injection vector has been identified.</td></tr></tbody></table><li> <p> <b>Craft overflow file content: </b>The adversary crafts the content to be injected. If the intent is to simply cause the software to crash, the content need only consist of an excessive quantity of random data. If the intent is to leverage the overflow for execution of arbitrary code, the adversary crafts the payload in such a way that the overwritten return address is replaced with one of the adversary's choosing.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create malicious shellcode that will execute when the program execution is returned to it.</td></tr><tr><td>Use a NOP-sled in the overflow content to more easily \"slide\" into the malicious code. This is done so that the exact return address need not be correct, only in the range of all of the NOPs</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Overflow the buffer: </b>Using the specially crafted file content, the adversary creates a symbolic link from the identified resource to the malicious file, causing a targeted buffer overflow attack.</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The adversary can create symbolic link on the target host.",
                "The target host does not perform correct boundary checking while consuming data from a resources."
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a buffer overflow to inject malicious code into the stack of a software system or even the heap can require a higher skill level.",
                "Low": "An adversary can simply overflow a buffer by inserting a long string into an adversary-modifiable injection vector. The result can be a DoS."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}