{
    "id": "bundle--bf909838-b458-4cfd-b840-93117968dd5e",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.",
            "external_references": [
                {
                    "external_id": "CAPEC-109",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/109.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-89",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/89.html"
                },
                {
                    "external_id": "CWE-564",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/564.html"
                },
                {
                    "description": "OWASP Web Security Testing Guide, The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-4",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/05.7-Testing_for_ORM_Injection"
                }
            ],
            "id": "attack-pattern--f0e32d0e-9580-4b79-95e0-6e3b99bf6e45",
            "modified": "2021-06-24T00:00:00.000Z",
            "name": "Object Relational Mapping Injection",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--42acc604-a86c-46f7-bd03-6e532c02d85e"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Unreliable Execution",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Gain Privileges",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Integrity": [
                    "Modify Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "When using Hibernate, it is possible to use the session.find() method to run queries against the database. This is an overloaded method that provides facilities to perform binding between the supplied user data and place holders in the statically defined query. However, it is also possible to use the session.find() method without using any of these query binding overloads, hence effectively concatenating the user supplied data with rest of the SQL query, resulting in a possibility for SQL injection. While the framework may provide mechanisms to use methods immune to SQL injections, it may also contain ways that are not immune that may be chosen by the developer."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Determine Persistence Framework Used: </b>An attacker tries to determine what persistence framework is used by the application in order to leverage a weakness in the generated data access layer code or a weakness in a way that the data access layer may have been used by the developer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>An attacker provides input to the application in an attempt to induce an error screen that reveals a stack trace that gives an indication of the automated data access layer used. Or an attacker may simply make some educated guesses and assume, for instance, that Hibernate is used and try to craft an attack from there.</td></tr></tbody></table><li> <p> <b>Probe for ORM Injection vulnerabilities: </b>The attacker injects ORM syntax into user-controllable data inputs of the application to determine if it is possible modify data query structure and content.</p></li></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Perform SQL Injection through the generated data access layer: </b>An attacker proceeds to exploit a weakness in the generated data access methods that does not properly separate control plane from the data plan, or potentially a particular way in which developer might have misused the generated code, to modify the structure of the executed SQL queries and/or inject entirely new SQL queries.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>An attacker uses normal SQL injection techniques and adjusts them to reflect the type of data access layer generation framework used by the application.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "Low",
            "x_capec_prerequisites": [
                "An application uses data access layer generated by an ORM tool or framework",
                "An application uses user supplied data in queries executed against the database",
                "The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework"
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack."
            ],
            "x_capec_skills_required": {
                "Medium": "Knowledge of general SQL injection techniques and subtleties of the ORM framework is needed"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}