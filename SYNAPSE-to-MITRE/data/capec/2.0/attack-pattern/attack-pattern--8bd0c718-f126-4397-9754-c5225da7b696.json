{
    "id": "bundle--b7833ef2-a4e0-4891-86bf-870c51461f18",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.",
            "external_references": [
                {
                    "external_id": "CAPEC-174",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/174.html"
                },
                {
                    "external_id": "CWE-88",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/88.html"
                },
                {
                    "description": "Yuval B., Ayal Y., Adi S., Flash Parameter Injection: A Security Advisory, 2008--09---24, IBM Rational Security Team",
                    "external_id": "REF-40",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://blog.watchfire.com/FPI.pdf"
                },
                {
                    "description": "Elaborate Ways to Exploit XSS: Flash Parameter Injection (FPI), 2014--04---08, Acunetix",
                    "external_id": "REF-560",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.acunetix.com/blog/articles/elaborate-ways-exploit-xss-flash-parameter-injection/"
                }
            ],
            "id": "attack-pattern--8bd0c718-f126-4397-9754-c5225da7b696",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Flash Parameter Injection",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_can_precede_refs": [
                "attack-pattern--70b83583-ffe3-4e6d-b4a6-61a9b9efc346",
                "attack-pattern--4ce65b20-6d2c-4217-b08a-e87b36c22353"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--2a8824eb-4fd0-45a4-9c3c-af3fd7c5e0ca"
            ],
            "x_capec_consequences": {
                "Authorization": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Other (Information Leakage)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>The following are examples for different types of parameters passed to the Flash file.</xhtml:p>\n               <xhtml:b>DOM-based Flash parameter injection</xhtml:b>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\">\n                  <xhtml:div style=\"margin-left:1em;\"><object><xhtml:div style=\"margin-left:1em;\"><embed src=\"myFlash.swf\" flashvars=\"location=http://example.com/index.htm#&globalVar=e-v-i-l\"></embed></xhtml:div></object></xhtml:div>\n               </xhtml:div>\n               <xhtml:b>Passing parameter in an embedded URI</xhtml:b>\n               <xhtml:div style=\"margin-left:1em;\"><object type=\"application/x-shockwave-flash\" data=\"myfile.swf?globalVar=e-v-i-l\" ></object></xhtml:div>\n               <xhtml:b>Passing parameter in flashvars</xhtml:b>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\"><object type=\"application/x-shockwafile.swf\" ve-flash\" data=\"my flashvars=\"language=English&globalVar=e-v-i-l\"></object></xhtml:div>\n               <xhtml:b>Persistent Flash Parameter Injection</xhtml:b>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\">\n                  <xhtml:div>\n                     <xhtml:i>// Create a new shared object or read an existing one</xhtml:i>\n                  </xhtml:div>mySharedObject = SharedObject.getLocal(\"flashToLoad\");if (_root.flashfile == undefined) {<xhtml:div style=\"margin-left:1em;\">\n                     <xhtml:div>\n                        <xhtml:i>// Check whether there is a shared object saved</xhtml:i>\n                     </xhtml:div>if (mySharedObject.data.flash == null) {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:i>// Set a default</xhtml:i>\n                        </xhtml:div>value _root.flashfile = \"defaultFlash.swf\";</xhtml:div>\n                     } else {<xhtml:div style=\"margin-left:1em;\">\n                        <xhtml:div>\n                           <xhtml:i>// Read the flash file to load from the shared object</xhtml:i>\n                        </xhtml:div>_root.flashfile = mySharedObject.data.flash;</xhtml:div>\n                     }</xhtml:div>\n                  }<xhtml:div>\n                     <xhtml:i>// Store the flash file's name in the shared object</xhtml:i>\n                  </xhtml:div>\n                  mySharedObject.data.flash = _root.flashfile;<xhtml:div>\n                     <xhtml:i>// Load the flash file</xhtml:i>\n                  </xhtml:div>\n                  getURL(_root.flashfile);</xhtml:div>\n               <xhtml:p>If an unsuspecting user is lured by an adversary to click on link like this: http://example.com/vulnerable.swf?flashfile=javascript:alert(document.domain)</xhtml:p>\n               <xhtml:p>The result will be not merely a one-time execution of the JavaScript code in the victim's browser in the context of the domain with the vulnerable Flash file, but every time the Flash is loaded, whether by direct reference or embedded inside the same domain, the JavaScript will be executed again.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Spider: </b>Using a browser or an automated tool, an adversary records all instances of HTML documents that have embedded Flash files. If there is an embedded Flash file, they list how to pass global parameters to the Flash file from the embedding object.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use an automated tool to record all instances of URLs which have embedded Flash files and list the parameters passing to the Flash file.</td></tr><tr><td>Use a browser to manually explore the website to see whether the HTML document has embedded Flash files or not and list the parameters passing to the Flash file.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Determine the application susceptibility to Flash parameter injection: </b>Determine the application susceptibility to Flash parameter injection. For each URL identified in the Explore phase, the adversary attempts to use various techniques such as DOM based, reflected, flashvars, and persistent attacks depending on the type of parameter passed to the embedded Flash file.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>When the JavaScript 'document.location' variable is used as part of the parameter, inject '#' and the payload into the parameter in the URL.</td></tr><tr><td>When the name of the Flash file is exposed as a form or a URL parameter, the adversary injects '?' and the payload after the file name in the URL to override some global value.</td></tr><tr><td>When the arguments passed in the 'flashvars' attributes, the adversary injects '&' and payload in the URL.</td></tr><tr><td>If some of the attributes of the <object> tag are received as parameters, the 'flashvars' attribute is injected into the <object> tag without the creator of the Web page ever intending to allow arguments to be passed into the Flash file.</td></tr><tr><td>If shared objects are used to save data that is entered by the user persistent Flash parameter injection may occur, with malicious code being injected into the Flash file and executed, every time the Flash file is loaded.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Execute Flash Parameter Injection Attack: </b>Inject parameters into Flash file. Based on the results of the Experiment phase, the adversary crafts the underlying malicious URL containing injected Flash parameters and submits it to the web server. Once the web server receives the request, the embedding HTML document will controllable by the adversary.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Craft underlying malicious URL and send it to the web server to take control of the embedding HTML document.</td></tr></tbody></table></ol></div>",
            "x_capec_extended_description": "\n            <xhtml:p>These 'FlashVars' are most often passed to the Flash file via URL arguments or from the Object or Embed tag within the embedding HTML document. If these FlashVars are not properly sanitized, an adversary may be able to embed malicious content (such as scripts) into the HTML document.</xhtml:p>\n            <xhtml:p>The injected parameters can also provide the adversary control over other objects within the Flash file as well as full control over the parent document's DOM model. As such, this is a form of HTTP parameter injection, but the abilities granted to the Flash document (such as access to a page's document model, including associated cookies) make this attack more flexible. Flash Parameter Injection attacks can also preface further attacks such as various forms of Cross-Site Scripting (XSS) attacks in addition to Session Hijacking attacks.</xhtml:p>\n         ",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_resources_required": [
                "The adversary must convince the victim to click their crafted link."
            ],
            "x_capec_skills_required": {
                "Medium": "The adversary need inject values into the global parameters to the Flash file and understand the parent HTML document DOM structure. The adversary needs to be smart enough to convince the victim to click on their crafted link."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Medium",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}