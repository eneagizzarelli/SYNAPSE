{
    "id": "bundle--eb2cd750-14ab-4f5a-ae2a-ca236b54048b",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary utilizes a hash function extension/padding weakness, to modify the parameters passed to the web service requesting authentication by generating their own call in order to generate a legitimate signature hash (as described in the notes), without knowledge of the secret token sometimes provided by the web service.",
            "external_references": [
                {
                    "external_id": "CAPEC-461",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/461.html"
                },
                {
                    "external_id": "CWE-328",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/328.html"
                },
                {
                    "external_id": "CWE-290",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/290.html"
                },
                {
                    "description": "Thai Duong, Juliano Rizzo, Flickr's API Signature Forgery Vulnerability, 2009--09---28",
                    "external_id": "REF-398",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://netifera.com/research/flickr_api_signature_forgery.pdf"
                }
            ],
            "id": "attack-pattern--1bc4fd64-65a6-41d4-ac68-8e3692eabe29",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Web Services API Signature Forgery Leveraging Hash Function Extension Weakness",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--8f665166-dfd1-40cb-91e8-b78bee1ceb6a"
            ],
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "To leverage an attack against the has function extension / padding weakness, consider the message to be passed to the web service is M (this message includes the parameters passed to the web service concatenated with the secret token / key bytes). The message M is hashed and that hash is passed to the web service and is used for authentication. The attacker does not know M, but can see Hash (M) and Length (M). The attacker can then compute Hash (M || Padding (M) || M') for any M'. The attacker does not know the entire message M, specifically the attacker does not know the secret bytes, but that does not matter. The attacker is still able to sign their own message M' and make the called web service verify the integrity of the message without an error."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Find a vulnerable web service: </b>The adversary finds a web service that uses a vulnerable authentication scheme, where an authentication token is concatenated with the parameters of a request and then hashed</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Read application documentation to learn about authentication schemes being used</td></tr><tr><td>Observe web service traffic to look for vulnerable authentication schemes</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Attempt adding padding to parameters: </b>An adversary tests if they can simply add padding to the parameters of a request such that the request is technically changed, with the hash remaining the same</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Exploit the hash function extension / padding weakness with only padding to test the weakness</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Add malicious parameters to request: </b>Add malicious parameters to a captured request in addition to what is already present. Do this by exploiting the padding weakness of the hash function and send the request to the web service so that it believes it is authenticated and acts on the extra parameters.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Exploit the hash function extension / padding weakness by adding malicious parameters to a web service request such that it is still deemed authentic</td></tr></tbody></table></ol></div>",
            "x_capec_extended_description": "\n            <xhtml:p>When web services require callees to authenticate, they sometimes issue a token / secret to the caller that the caller is to use to sign their web service calls. In one such scheme the caller, when constructing a request, would concatenate all of the parameters passed to the web service with the provided authentication token and then generate a hash of the concatenated string (e.g., MD5, SHA1, etc.). That hash then forms the signature that is passed to the web service which is used on the server side to verify the origin authenticity and integrity of the message. Because of the iterative design of the hash function, it is possible, from only the hash of a message and its length, for an adversary to conduct signature forgery by computing the hash of longer messages that start with the initial message and include the padding required for the initial message to reach a multiple of 512 bits. It is important to note that the attack not limited to MD5 and will work on other hash functions such as SHA1.</xhtml:p>\n         ",
            "x_capec_prerequisites": [
                "Web services check the signature of the API calls",
                "Authentication tokens / secrets are shared between the server and the legitimate client",
                "The API call signature is generated by concatenating the parameter list with the shared secret and hashing the result.",
                "An iterative hash function like MD5 and SHA1 is used.",
                "An attacker is able to intercept or in some other way gain access to the information passed between the legitimate client and the server in order to retrieve the hash value and length of the original message.",
                "The communication channel between the client and the server is not secured via channel security such as TLS"
            ],
            "x_capec_resources_required": [
                "\n               <xhtml:p>Access to a function to produce a hash (e.g., MD5, SHA1)</xhtml:p>\n               <xhtml:p>Tools that allow the attacker to intercept a message between the client and the server, specifically the hash that is the signature and the length of the original message concatenated with the secret bytes</xhtml:p>\n            "
            ],
            "x_capec_skills_required": {
                "Medium": "Medium level of cryptography knowledge, specifically how iterative hash functions work. This is needed to select proper padding."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}