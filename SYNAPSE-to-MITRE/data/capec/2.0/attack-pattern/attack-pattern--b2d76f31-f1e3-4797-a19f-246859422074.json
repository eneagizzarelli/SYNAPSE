{
    "id": "bundle--3780df46-4818-488c-beff-0d908682a645",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \\) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.",
            "external_references": [
                {
                    "external_id": "CAPEC-139",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/139.html"
                },
                {
                    "external_id": "CWE-23",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/23.html"
                },
                {
                    "description": "OWASP Testing Guide (v4), 2010, The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-9",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.owasp.org/index.php/Testing_for_Path_Traversal_(OWASP-AZ-001)"
                },
                {
                    "description": "WASC Threat Classification 2.0, 2010, The Web Application Security Consortium (WASC)",
                    "external_id": "REF-10",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://projects.webappsec.org/w/page/13246952/Path-Traversal"
                }
            ],
            "id": "attack-pattern--b2d76f31-f1e3-4797-a19f-246859422074",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Relative Path Traversal",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--faf0ec21-da60-4efc-8c8e-7a6b63bea170"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Bypass Protection Mechanism"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Unreliable Execution"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Integrity": [
                    "Modify Data",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file.</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"attack\">http://www.example.com/getProfile.jsp?filename=../../../../etc/passwd</xhtml:div>\n               <xhtml:p>However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string.</xhtml:p>\n               <xhtml:p>Then an attacker creates special payloads to bypass this filter:</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"attack\">http://www.example.com/getProfile.jsp?filename=%2e%2e/%2e%2e/%2e%2e/%2e%2e /etc/passwd</xhtml:div>\n               <xhtml:p>When the application gets this input string, it will be the desired vector by the attacker.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Fingerprinting of the operating system: </b>In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</td></tr><tr><td>TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.</td></tr><tr><td>Induce errors to find informative error messages</td></tr></tbody></table><li> <p> <b>Survey application: </b>Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.</td></tr><tr><td>Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</td></tr><tr><td>Use a browser to manually explore a website and analyze how it is constructed. Many browser plug-ins are available to facilitate the analysis or automate the URL discovery.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Attempt variations on input parameters: </b>Using manual or automated means, an adversary attempts varying relative file path combinations on all found user input locations and observes the responses.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Provide \"../\" or \"..\\\" at the beginning of any filename to traverse to the parent directory</td></tr><tr><td>Use a list of probe strings as path traversal payload. Different strings may be used for different platforms. Strings contain relative path sequences such as \"../\".</td></tr><tr><td>Use a proxy tool to record results of manual input of relative path traversal probes in known URLs.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Access, modify, or execute arbitrary files.: </b>An adversary injects path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Manipulate file and its path by injecting relative path sequences (e.g. \"../\").</td></tr><tr><td>Download files, modify files, or try to execute shell commands (with binary files).</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The target application must accept a string as user input, fail to sanitize combinations of characters in the input that have a special meaning in the context of path navigation, and insert the user-supplied string into path navigation commands."
            ],
            "x_capec_skills_required": {
                "High": "To bypass non trivial filters in the application",
                "Low": "To inject the malicious payload in a web page"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}