{
    "id": "bundle--2f5f572a-d0fa-4b59-acd2-bbfdf7ce78a8",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.",
            "external_references": [
                {
                    "external_id": "CAPEC-28",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/28.html"
                },
                {
                    "external_id": "CWE-74",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                }
            ],
            "id": "attack-pattern--7f0ec88f-b057-4a73-93d8-8a30cfdbcf77",
            "modified": "2021-06-24T00:00:00.000Z",
            "name": "Fuzzing",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Meta",
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Unreliable Execution",
                    "Alter Execution Logic"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Gain Privileges",
                    "Alter Execution Logic"
                ],
                "Integrity": [
                    "Modify Data",
                    "Alter Execution Logic"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "A fuzz test reveals that when data length for a particular field exceeds certain length, the input validation filter fails and lets the user data in unfiltered. This provides an attacker with an injection vector to deliver the malicious payload into the system."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Observe communication and inputs: </b>The fuzzing attacker observes the target system looking for inputs and communications between modules, subsystems, or systems.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Network sniffing. Using a network sniffer such as wireshark, the attacker observes communications into and out of the target system.</td></tr><tr><td>Monitor API execution. Using a tool such as ktrace, strace, APISpy, or another debugging tool, the attacker observes the system calls and API calls that are made by the target system, and the nature of their parameters.</td></tr><tr><td>Observe inputs using web inspection tools (OWASP's WebScarab, Paros, TamperData, TamperIE, etc.)</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Generate fuzzed inputs: </b>Given a fuzzing tool, a target input or protocol, and limits on time, complexity, and input variety, generate a list of inputs to try. Although fuzzing is random, it is not exhaustive. Parameters like length, composition, and how many variations to try are important to get the most cost-effective impact from the fuzzer.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Boundary cases. Generate fuzz inputs that attack boundary cases of protocol fields, inputs, or other communications limits. Examples include 0xff and 0x00 for single-byte inputs. In binary situations, approach each bit of an individual field with on and off (e.g., 0x80).</td></tr><tr><td>Attempt arguments to system calls or APIs. The variations include payloads that, if they were successful, could lead to a compromise on the system.</td></tr></tbody></table><li> <p> <b>Observe the outcome: </b>Observe the outputs to the inputs fed into the system by fuzzers and see if anything interesting happens. If failure occurs, determine why that happened. Figure out the underlying assumption that was invalidated by the input.</p></li></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Craft exploit payloads: </b>Put specially crafted input into the system that leverages the weakness identified through fuzzing and allows to achieve the goals of the attacker. Fuzzers often reveal ways to slip through the input validation filters and introduce unwanted data into the system.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Identify and embed shell code for the target system.</td></tr><tr><td>Embed higher level attack commands in the payload. (e.g., SQL, PHP, server-side includes, etc.)</td></tr><tr><td>Induce denial of service by exploiting resource leaks or bad error handling.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_parent_of_refs": [
                "attack-pattern--b5618a54-4646-423d-8676-b2eb56dd4328"
            ],
            "x_capec_resources_required": [
                "Fuzzing tools."
            ],
            "x_capec_skills_required": {
                "Low": "There is a wide variety of fuzzing tools available."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Medium",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}