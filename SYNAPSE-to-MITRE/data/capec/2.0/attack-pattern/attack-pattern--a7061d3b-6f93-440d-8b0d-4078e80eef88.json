{
    "id": "bundle--4857ae0b-54ae-4afb-a073-3d2caf12219e",
    "objects": [
        {
            "created": "2021-06-24T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "\n            <xhtml:p>Software produced by a reputable developer is clandestinely infected with malicious code and then digitally signed by the unsuspecting developer, where the software has been altered via a compromised software development or build process prior to being signed. The receiver or user of the software has no reason to believe that it is anything but legitimate and proceeds to deploy it to organizational systems.</xhtml:p>\n            <xhtml:p>This attack differs from CAPEC-206, since the developer is inadvertently signing malicious code they believe to be legitimate and which they are unware of any malicious modifications.</xhtml:p>\n         ",
            "external_references": [
                {
                    "external_id": "CAPEC-673",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/673.html"
                },
                {
                    "description": "Supply Chain Compromise: Compromise Software Supply Chain",
                    "external_id": "T1195.002",
                    "source_name": "ATTACK",
                    "url": "https://attack.mitre.org/wiki/Technique/T1195/002"
                },
                {
                    "description": "Defending Against Software Supply Chain Attacks, 2021--04, Cybersecurity and Infrastructure Security Agency (CISA)",
                    "external_id": "REF-658",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.cisa.gov/sites/default/files/publications/defending_against_software_supply_chain_attacks_508_1.pdf"
                },
                {
                    "description": "Dr. Charles Clancy, Joe Ferraro, Robert A. Martin, Adam G. Pennington, Christopher L. Sledjeski, Dr. Craig J. Wiener, Deliver Uncompromised: Securing Critical Software Supply Chains, 2021--01, The MITRE Corporation",
                    "external_id": "REF-659",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.mitre.org/publications/technical-papers/deliver-uncompromised-securing-critical-software-supply-chains"
                }
            ],
            "id": "attack-pattern--a7061d3b-6f93-440d-8b0d-4078e80eef88",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Developer Signing Maliciously Altered Software",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_can_follow_refs": [
                "attack-pattern--69b5d398-114d-437d-a8db-06f1382012b7"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--efb74200-657d-438c-aaff-bbd9644dd72d"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges",
                    "Execute Unauthorized Commands"
                ],
                "Authorization": [
                    "Gain Privileges",
                    "Execute Unauthorized Commands"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Modify Data"
                ],
                "Integrity": [
                    "Read Data",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Supply Chain",
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>An adversary who has infiltrated an organization’s build environment maliciously alters code intended to be included in a product’s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer’s intent with respect to functionality unaware of the adversary’s malicious intent harbored within.</xhtml:p>\n            "
            ],
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "An adversary would need to have access to a targeted developer’s software development environment, including to their software build processes, where the adversary could ensure code maliciously tainted prior to a build process is included in software packages built."
            ],
            "x_capec_skills_required": {
                "High": "The adversary must have the skills to infiltrate a developer’s software development/build environment and to implant malicious code in developmental software code, a build server, or a software repository containing dependency code, which would be referenced to be included during the software build process."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}