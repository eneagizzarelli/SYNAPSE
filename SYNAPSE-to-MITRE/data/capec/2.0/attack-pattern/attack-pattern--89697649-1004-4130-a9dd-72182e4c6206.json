{
    "id": "bundle--d6ff4939-09b5-4612-862c-18209b4ad06d",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (<img>), comments in XML documents (< !-CDATA->), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.",
            "external_references": [
                {
                    "external_id": "CAPEC-18",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/18.html"
                },
                {
                    "external_id": "CWE-80",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/80.html"
                },
                {
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1",
                    "source_name": "reference_from_CAPEC"
                }
            ],
            "id": "attack-pattern--89697649-1004-4130-a9dd-72182e4c6206",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "XSS Targeting Non-Script Elements",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--61b17787-fe92-427c-9e6a-6311997d7b2a",
                "attack-pattern--800f8095-99b6-4bb9-8bc6-8b9727201a2f",
                "attack-pattern--b1eef783-daae-494c-a418-cd9ada7cbe8b"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software",
                "Software",
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. A malicious user embeds JavaScript in the IMG tags in their messages that gets executed within the victim's browser whenever the victim reads these messages.</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"attack\"><img src=javascript:alert('XSS')></xhtml:div>\n               <xhtml:p>When executed within the victim's browser, the malicious script could accomplish a number of adversary objectives including stealing sensitive information such as usernames, passwords, or cookies.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey the application for user-controllable inputs: </b>Using a browser or an automated tool, an adversary records all entry points for inputs that happen to be reflected in a client-side non-script element. These non-script elements can be located in the HTML content (head, body, comments), in an HTML tag, XML, CSS, etc.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a spidering tool to follow and record all non-static links that are likely to have input parameters (through forms, URL, fragments, etc.) actively used by the Web application.</td></tr><tr><td>Use a proxy tool to record all links visited during a manual traversal of the web application.</td></tr><tr><td>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Probe identified potential entry points for XSS vulnerability: </b>The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Manually inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).</td></tr><tr><td>Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes that typically work in a client-side non-script elements context and observe system behavior to determine if script was executed. Since these probes may have to be injected in many different types of non-script elements, they should cover a variety of possible contexts (CSS, HTML tag, XML, etc.).</td></tr><tr><td>Use a proxy tool to record results of the created requests.</td></tr></tbody></table><li> <p> <b>Create malicious XSS content: </b>Once the adversary has determined which entry points are vulnerable to XSS, they will interact with the web application to store the malicious content. Because of the nature of this attack, it is mostly carried out through stored XSS, although it is possible to perform this attack using reflected XSS. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from a victim.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Store a malicious script on a page, disguised as a non-script element, that will execute when viewed by the victim.</td></tr><tr><td>Use a tool such as BeEF to store a hook into the web application. This will alert the adversary when the victim has accessed the content and will give the adversary control over the victim's browser, allowing them access to cookies, user screenshot, user clipboard, and more complex XSS attacks.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Get victim to view stored content: </b>In order for the attack to be successful, the victim needs to view the stored malicious content on the webpage.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Send a phishing email to the victim containing a URL that will direct them to the malicious stored content.</td></tr><tr><td>Simply wait for a victim to view the content. This is viable in situations where content is posted to a popular public forum.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "The target client software must allow the execution of scripts generated by remote hosts."
            ],
            "x_capec_resources_required": [
                "Ability to include malicious script in document, e.g. HTML file, or XML document. Ability to deploy a custom hostile service for access by targeted clients. Ability to communicate synchronously or asynchronously with client machine"
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.",
                "Low": "To achieve a redirection and use of less trusted source, an adversary can simply edit content such as XML payload or HTML files that are sent to client machine."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}