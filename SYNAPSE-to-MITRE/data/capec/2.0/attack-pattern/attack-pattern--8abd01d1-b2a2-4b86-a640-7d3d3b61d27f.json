{
    "id": "bundle--59f6515a-3e4a-4f84-a3ec-96177fed11fe",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.",
            "external_references": [
                {
                    "external_id": "CAPEC-230",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/230.html"
                },
                {
                    "external_id": "CWE-112",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/112.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-674",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/674.html"
                },
                {
                    "external_id": "CWE-770",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/770.html"
                },
                {
                    "description": "Shlomo, Yona, XML Parser Attacks: A summary of ways to attack an XML Parser, 2007",
                    "external_id": "REF-89",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://yeda.cs.technion.ac.il/~yona/talks/xml_parser_attacks/slides/slide2.html"
                }
            ],
            "id": "attack-pattern--8abd01d1-b2a2-4b86-a640-7d3d3b61d27f",
            "modified": "2021-10-21T00:00:00.000Z",
            "name": "Serialized Data with Nested Payloads",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_alternate_terms": [
                "XML Denial of Service (XML DoS)"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--e171fd74-3ea6-4ad5-b0ff-71bb311c8024"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Resource Consumption",
                    "Execute Unauthorized Commands"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Execute Unauthorized Commands",
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p>An adversary determines the input data stream that is being processed by a data parser that supports using substitution on the victim's side.</p></li></ol></div><div><h3>Exploit</h3><ol><li> <p>An adversary crafts input data that may have an adverse effect on the operation of the parser when the data is parsed on the victim's system.</p></li></ol></div>",
            "x_capec_extended_description": "\n            <xhtml:p>An adversary's goal is to leverage parser failure to their advantage. In most cases this type of an attack will result in a Denial of Service due to an application becoming unstable, freezing, or crashing. However it may be possible to cause a crash resulting in arbitrary code execution, leading to a jump from the data plane to the control plane [REF-89].</xhtml:p>\n            <xhtml:p>This attack is most closely associated with web services using SOAP or a Rest API, because remote service requesters can post malicious payloads to the service provider. The main weakness is that the service provider generally must inspect, parse, and validate the messages to determine routing, workflow, security considerations, and so on. It is exactly these inspection, parsing, and validation routines that this attack targets. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.</xhtml:p>\n         ",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_parent_of_refs": [
                "attack-pattern--f36abc8a-043e-42c5-876d-a65fc0cddc1e",
                "attack-pattern--8f70b1fb-393f-4494-b4ad-67f1a2107975"
            ],
            "x_capec_prerequisites": [
                "An application's user-controllable data is expressed in a language that supports subsitution.",
                "An application does not perform sufficient validation to ensure that user-controllable data is not malicious."
            ],
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}