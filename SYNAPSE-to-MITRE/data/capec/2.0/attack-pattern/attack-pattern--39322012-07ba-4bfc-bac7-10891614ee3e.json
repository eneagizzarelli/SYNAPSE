{
    "id": "bundle--be4755ea-7672-4376-a610-75c82f892ac0",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.",
            "external_references": [
                {
                    "external_id": "CAPEC-86",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/86.html"
                },
                {
                    "external_id": "CWE-80",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/80.html"
                },
                {
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1",
                    "source_name": "reference_from_CAPEC"
                },
                {
                    "description": "OWASP Cheatsheets, The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-69",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.owasp.org/www-community/xss-filter-evasion-cheatsheet"
                },
                {
                    "description": "Watchfire Research, XSS vulnerabilities in Google.com, Full Disclosure mailing list archives",
                    "external_id": "REF-476",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://seclists.org/fulldisclosure/2005/Dec/1107"
                }
            ],
            "id": "attack-pattern--39322012-07ba-4bfc-bac7-10891614ee3e",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "XSS Through HTTP Headers",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--61b17787-fe92-427c-9e6a-6311997d7b2a",
                "attack-pattern--b1eef783-daae-494c-a418-cd9ada7cbe8b",
                "attack-pattern--800f8095-99b6-4bb9-8bc6-8b9727201a2f"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data",
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software",
                "Software",
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>Utilize a remote style sheet set in the HTTP header for XSS attack. When the adversary is able to point to a remote stylesheet, any of the variables set in that stylesheet are controllable on the client side by the remote adversary. Like most XSS attacks, results vary depending on browser that is used [REF-97].</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"attack\"><META HTTP-EQUIV=\"Link\" Content=\"<http://ha.ckers.org/xss.css>; REL=stylesheet\"></xhtml:div>\n            ",
                "\n               <xhtml:p>Google's 404 redirection script was found vulnerable to this attack vector.</xhtml:p>\n               <xhtml:p>Google's 404 file not found page read</xhtml:p>\n               <xhtml:p>* Response headers: \"Content-Type: text/html; charset=[encoding]\".</xhtml:p>\n               <xhtml:p>* Response body: <META http-equiv=\"Content-Type\" (...) charset=[encoding]/></xhtml:p>\n               <xhtml:p>If the response sends an unexpected encoding type such as UTF-7, then no enforcement is done on the payload and arbitrary XSS code will be transported along with the standard HTTP response. [REF-476]</xhtml:p>\n            ",
                "XSS can be used in variety of ways, because it is scripted and executes in a distributed, asynchronous fashion it can create its own vector and openings. For example, the adversary can use XSS to mount a DDoS attack by having series of different computers unknowingly executing requests against a single host."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey the application for public links: </b>Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the entry points (input) that becomes part of generated HTTP header (not only GET/POST/COOKIE, but also Content-Type, etc.)</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters used in the HTTP headers.</td></tr><tr><td>Look for HTML meta tags that could be injectable</td></tr><tr><td>Use a proxy tool to record all links visited during a manual traversal of the web application.</td></tr><tr><td>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p>[Probe identified potential entry points for XSS vulnerability]<xhtml:p>The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. They record all the responses from the server that include unmodified versions of their script.</xhtml:p>\n                  <xhtml:p>The adversary tries also to inject extra-parameter to the HTTP request to see if they are reflected back in the web page or in the HTTP response.</xhtml:p>\n               </p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Manually inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.</td></tr><tr><td>Use an automated injection attack tool to inject various script payloads into each identified entry point using a list of common script injection probes and observe system behavior to determine if script was executed.</td></tr><tr><td>Use a proxy tool to record results of manual input of XSS probes in known URLs.</td></tr></tbody></table><li> <p> <b>Craft malicious XSS URL: </b>Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Change a URL parameter which is used in an HTTP header to include a malicious script tag. Because it is in the header it may bypass validation.</td></tr><tr><td>Send information gathered from the malicious script to a remote endpoint.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Get victim to click URL: </b>In order for the attack to be successful, the victim needs to access the malicious URL.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.</td></tr><tr><td>Put the malicious URL on a public forum, where many victims might accidentally click the link.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "Target software must be a client that allows scripting communication from remote hosts."
            ],
            "x_capec_resources_required": [
                "The adversary must have the ability to deploy a custom hostile service for access by targeted clients and the abbility to communicate synchronously or asynchronously with client machine. The adversary must also control a remote site of some sort to redirect client and data to."
            ],
            "x_capec_skills_required": {
                "High": "Exploiting a client side vulnerability to inject malicious scripts into the browser's executable process.",
                "Low": "To achieve a redirection and use of less trusted source, an adversary can simply edit HTTP Headers that are sent to client machine."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}