{
    "id": "bundle--319237d5-fab5-4c10-8a22-406a632470c0",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the \"shortest possible\" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.",
            "external_references": [
                {
                    "external_id": "CAPEC-80",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/80.html"
                },
                {
                    "external_id": "CWE-173",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/173.html"
                },
                {
                    "external_id": "CWE-172",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/172.html"
                },
                {
                    "external_id": "CWE-180",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/180.html"
                },
                {
                    "external_id": "CWE-181",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/181.html"
                },
                {
                    "external_id": "CWE-73",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/73.html"
                },
                {
                    "external_id": "CWE-74",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-697",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html"
                },
                {
                    "external_id": "CWE-692",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/692.html"
                },
                {
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1",
                    "source_name": "reference_from_CAPEC"
                },
                {
                    "description": "David Wheeler, Secure Programming for Linux and Unix HOWTO",
                    "external_id": "REF-112",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/character-encoding.html"
                },
                {
                    "description": "Michael Howard, David LeBlanc, Writing Secure Code, Microsoft Press",
                    "external_id": "REF-530",
                    "source_name": "reference_from_CAPEC"
                },
                {
                    "description": "Bruce Schneier, Security Risks of Unicode, Crypto-Gram Newsletter, 2000--07---15",
                    "external_id": "REF-531",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.schneier.com/crypto-gram/archives/2000/0715.html"
                },
                {
                    "description": "Wikipedia, The Wikimedia Foundation, Inc",
                    "external_id": "REF-532",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://en.wikipedia.org/wiki/UTF-8"
                },
                {
                    "description": "F. Yergeau, RFC 3629 - UTF-8, a transformation format of ISO 10646, 2003--11",
                    "external_id": "REF-533",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.faqs.org/rfcs/rfc3629.html"
                },
                {
                    "description": "Eric Hacker, IDS Evasion with Unicode, 2001--01---03",
                    "external_id": "REF-114",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.securityfocus.com/infocus/1232"
                },
                {
                    "description": "Corrigendum #1: UTF-8 Shortest Form, The Unicode Standard, 2001--03, Unicode, Inc.",
                    "external_id": "REF-535",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.unicode.org/versions/corrigendum1.html"
                },
                {
                    "description": "Markus Kuhn, UTF-8 and Unicode FAQ for Unix/Linux, 1999--06---04",
                    "external_id": "REF-525",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.cl.cam.ac.uk/~mgk25/unicode.html"
                },
                {
                    "description": "Markus Kuhn, UTF-8 decoder capability and stress test, 2003--02---19",
                    "external_id": "REF-537",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.cl.cam.ac.uk/%7Emgk25/ucs/examples/UTF-8-test.txt"
                }
            ],
            "id": "attack-pattern--2f463f26-84b9-4ab2-9b98-63c817fb3497",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Using UTF-8 Encoding to Bypass Validation Logic",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--a1af7c24-25cb-46e5-a27b-ed316e1f91ce"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Bypass Protection Mechanism"
                ],
                "Authorization": [
                    "Bypass Protection Mechanism"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Unreliable Execution"
                ],
                "Confidentiality": [
                    "Bypass Protection Mechanism",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>Perhaps the most famous UTF-8 attack was against unpatched Microsoft Internet Information Server (IIS) 4 and IIS 5 servers. If an attacker made a request that looked like this</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"attack\">http://servername/scripts/..%c0%af../winnt/system32/ cmd.exe</xhtml:div>\n               <xhtml:p>the server didn't correctly handle %c0%af in the URL. What do you think %c0%af means? It's 11000000 10101111 in binary; and if it's broken up using the UTF-8 mapping rules, we get this: 11000000 10101111. Therefore, the character is 00000101111, or 0x2F, the slash (/) character! The %c0%af is an invalid UTF-8 representation of the / character. Such an invalid UTF-8 escape is often referred to as an overlong sequence.</xhtml:p>\n               <xhtml:p>So when the attacker requested the tainted URL, they accessed</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"result\">http://servername/scripts/../../winnt/system32/cmd.exe</xhtml:div>\n               <xhtml:p>In other words, they walked out of the script's virtual directory, which is marked to allow program execution, up to the root and down into the system32 directory, where they could pass commands to the command shell, Cmd.exe.</xhtml:p>See also: CVE-2000-0884"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey the application for user-controllable inputs: </b>Using a browser or an automated tool, an attacker follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</td></tr><tr><td>Use a proxy tool to record all user input entry points visited during a manual traversal of the web application.</td></tr><tr><td>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Probe entry points to locate vulnerabilities: </b>The attacker uses the entry points gathered in the \"Explore\" phase as a target list and injects various UTF-8 encoded payloads to determine if an entry point actually represents a vulnerability with insufficient validation logic and to characterize the extent to which the vulnerability can be exploited.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Try to use UTF-8 encoding of content in Scripts in order to bypass validation routines.</td></tr><tr><td>Try to use UTF-8 encoding of content in HTML in order to bypass validation routines.</td></tr><tr><td>Try to use UTF-8 encoding of content in CSS in order to bypass validation routines.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_peer_of_refs": [
                "attack-pattern--feed1b00-2f2b-490f-aee1-0de5b1fbf732",
                "attack-pattern--663a1a48-1d23-4dd5-869a-02d5a6b05770"
            ],
            "x_capec_prerequisites": [
                "The application's UTF-8 decoder accepts and interprets illegal UTF-8 characters or non-shortest format of UTF-8 encoding.",
                "Input filtering and validating is not done properly leaving the door open to harmful characters for the target host."
            ],
            "x_capec_skills_required": {
                "Low": "An attacker can inject different representation of a filtered character in UTF-8 format.",
                "Medium": "An attacker may craft subtle encoding of input data by using the knowledge that they have gathered about the target host."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}