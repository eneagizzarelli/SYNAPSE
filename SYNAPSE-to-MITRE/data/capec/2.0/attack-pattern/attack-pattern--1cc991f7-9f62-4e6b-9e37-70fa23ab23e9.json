{
    "id": "bundle--98288ed9-c082-447c-a83d-8ec8669b6f61",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.",
            "external_references": [
                {
                    "external_id": "CAPEC-30",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/30.html"
                },
                {
                    "external_id": "CWE-270",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/270.html"
                },
                {
                    "description": "Process Injection: Thread Execution Hijacking",
                    "external_id": "T1055.003",
                    "source_name": "ATTACK",
                    "url": "https://attack.mitre.org/wiki/Technique/T1055/003"
                }
            ],
            "id": "attack-pattern--1cc991f7-9f62-4e6b-9e37-70fa23ab23e9",
            "modified": "2021-10-21T00:00:00.000Z",
            "name": "Hijacking a Privileged Thread of Execution",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--c05fff04-b965-4a11-9c18-379dac31969f"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Gain Privileges",
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "Adversary targets an application written using Java's AWT, with the 1.2.2 era event model. In this circumstance, any AWTEvent originating in the underlying OS (such as a mouse click) would return a privileged thread (e.g., a system call). The adversary could choose to not return the AWT-generated thread upon consuming the event, but instead leveraging its privilege to conduct privileged operations."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Determine target thread: </b>The adversary determines the underlying system thread that is subject to user-control</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Gain handle to thread: </b>The adversary then gains a handle to a process thread.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use the \"OpenThread\" API call in Windows on a known thread.</td></tr><tr><td>Cause an exception in a java privileged block public function and catch it, or catch a normal signal. The thread is then hanging and the adversary can attempt to gain a handle to it.</td></tr></tbody></table><li> <p> <b>Alter process memory: </b>Once the adversary has a handle to the target thread, they will suspend the thread and alter the memory using native OS calls.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>On Windows, use \"SuspendThread\" followed by \"VirtualAllocEx\", \"WriteProcessMemory\", and \"SetThreadContext\".</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Resume thread execution: </b>Once the process memory has been altered to execute malicious code, the thread is then resumed.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>On Windows, use \"ResumeThread\".</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "Low",
            "x_capec_prerequisites": [
                "The application in question employs a threaded model of execution with the threads operating at, or having the ability to switch to, a higher privilege level than normal users",
                "In order to feasibly execute this class of attacks, the adversary must have the ability to hijack a privileged thread. This ability includes, but is not limited to, modifying environment variables that affect the process the thread belongs to, or calling native OS calls that can suspend and alter process memory. This does not preclude network-based attacks, but makes them conceptually more difficult to identify and execute."
            ],
            "x_capec_resources_required": [
                "\n               <xhtml:p>None: No specialized resources are required to execute this type of attack. The adversary needs to be able to latch onto a privileged thread.</xhtml:p>\n               <xhtml:p>The adversary does, however, need to be able to program, compile, and link to the victim binaries being executed so that it will turn control of a privileged thread over to the adversary's malicious code. This is the case even if the adversary conducts the attack remotely.</xhtml:p>\n            "
            ],
            "x_capec_skills_required": {
                "High": "Hijacking a thread involves knowledge of how processes and threads function on the target platform, the design of the target application as well as the ability to identify the primitives to be used or manipulated to hijack the thread."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}