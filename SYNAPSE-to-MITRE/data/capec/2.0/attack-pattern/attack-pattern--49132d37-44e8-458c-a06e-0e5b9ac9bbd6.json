{
    "id": "bundle--f8d431ba-eaf6-4885-ac9a-d4eec46fbfa0",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.",
            "external_references": [
                {
                    "external_id": "CAPEC-54",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/54.html"
                },
                {
                    "external_id": "CWE-209",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/209.html"
                }
            ],
            "id": "attack-pattern--49132d37-44e8-458c-a06e-0e5b9ac9bbd6",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Query System for Information",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--913426fa-ea1f-43b0-8492-1d363ea109d6"
            ],
            "x_capec_consequences": {
                "Confidentiality": [
                    "Read Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "Blind SQL injection is an example of this technique, applied to successful exploit. See also: CVE-2006-4705",
                "\n               <xhtml:p>Attacker sends bad data at various servlets in a J2EE system, records returned exception stack traces, and maps application functionality.</xhtml:p>\n               <xhtml:p>In addition, this technique allows attackers to correlate those servlets used with the underlying open source packages (and potentially version numbers) that provide them.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Determine parameters: </b>Determine all user-controllable parameters of the application either by probing or by finding documentation</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Cause error condition: </b>Inject each parameter with content that causes an error condition to manifest</p></li><li> <p> <b>Modify parameters: </b>Modify the content of each parameter according to observed error conditions</p></li></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Follow up attack: </b>Once the above steps have been repeated with enough parameters, the application will be sufficiently mapped out. The adversary can then launch a desired attack (for example, Blind SQL Injection)</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_parent_of_refs": [
                "attack-pattern--62c46d1c-f091-467e-a4b0-61927db31f38",
                "attack-pattern--b5618a54-4646-423d-8676-b2eb56dd4328",
                "attack-pattern--ce75149a-6882-4b07-8841-db9d6a9ec20d",
                "attack-pattern--5871f734-1898-4509-860c-f418cdf6b2ac",
                "attack-pattern--165b75a3-3e50-492c-8f1a-af979dc5af12"
            ],
            "x_capec_prerequisites": [
                "This class of attacks does not strictly require authorized access to the application. As Attackers use this attack process to classify, map, and identify vulnerable aspects of an application, it simply requires hypotheses to be verified, interaction with the application, and time to conduct trial-and-error activities."
            ],
            "x_capec_resources_required": [
                "\n               <xhtml:p>The Attacker needs the ability to probe application functionality and provide it erroneous directives or data without triggering intrusion detection schemes or making enough of an impact on application logging that steps are taken against the adversary.</xhtml:p>\n               <xhtml:p>The Attack does not need special hardware, software, skills, or access.</xhtml:p>\n            "
            ],
            "x_capec_skills_required": {
                "Medium": "Although fuzzing parameters is not difficult, and often possible with automated fuzzers, interpreting the error conditions and modifying the parameters so as to move further in the process of mapping the application requires detailed knowledge of target platform, the languages and packages used as well as software design."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Low",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}