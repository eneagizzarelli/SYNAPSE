{
    "id": "bundle--2a61ab94-6119-4cbf-babe-6bbbe7cdfae8",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.",
            "external_references": [
                {
                    "external_id": "CAPEC-462",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/462.html"
                },
                {
                    "external_id": "CWE-385",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/385.html"
                },
                {
                    "external_id": "CWE-352",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/352.html"
                },
                {
                    "external_id": "CWE-208",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/208.html"
                },
                {
                    "description": "Chris Evans, Cross-Domain Search Timing, 2009--12---11",
                    "external_id": "REF-399",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://scarybeastsecurity.blogspot.com/2009/12/cross-domain-search-timing.html"
                }
            ],
            "id": "attack-pattern--5871f734-1898-4509-860c-f418cdf6b2ac",
            "modified": "2022-02-22T00:00:00.000Z",
            "name": "Cross-Domain Search Timing",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--49132d37-44e8-458c-a06e-0e5b9ac9bbd6"
            ],
            "x_capec_consequences": {
                "Confidentiality": [
                    "Read Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Determine service to send cross domain requests to: </b>The adversary first determines which service they will be sending the requests to</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Send and time various cross domain requests: </b>Adversaries will send a variety of cross domain requests to the target, timing the time it takes for the target to respond. Although they won't be able to read the response, the adversary can use the time to infer information about what the service did upon receiving the request.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Using a GET request, leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events to time a response</td></tr><tr><td>Using a POST request, leverage the \"iframe\" element and use the \"onload()\" event to time a response</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Infer information from the response time: </b>After obtaining reponse times to various requests, the adversary will compare these times and infer potentially sensitive information. An example of this could be asking a service to retrieve information and random usernames. If one request took longer to process, it is likely that a user with that username exists, which could be useful knowledge to an adversary.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Compare timing of different requests to infer potentially sensitive information about a target service</td></tr></tbody></table></ol></div>",
            "x_capec_extended_description": "\n            <xhtml:p>For GET requests an attacker could for instance leverage the \"img\" tag in conjunction with \"onload() / onerror()\" javascript events. For the POST requests, an attacker could leverage the \"iframe\" element and leverage the \"onload()\" event. There is nothing in the current browser security model that prevents an attacker to use these methods to time responses to the attackers' cross domain requests. The timing for these responses leaks information. For instance, if a victim has an active session with their online e-mail account, an attacker could issue search requests in the victim's mailbox. While the attacker is not able to view the responses, based on the timings of the responses, the attacker could ask yes / no questions as to the content of victim's e-mails, who the victim e-mailed, when, etc. This is but one example; There are other scenarios where an attacker could infer potentially sensitive information from cross domain requests by timing the responses while asking the right questions that leak information.</xhtml:p>\n         ",
            "x_capec_prerequisites": [
                "Ability to issue GET / POST requests cross domainJava Script is enabled in the victim's browserThe victim has an active session with the site from which the attacker would like to receive informationThe victim's site does not protect search functionality with cross site request forgery (CSRF) protection"
            ],
            "x_capec_resources_required": [
                "Ability to issue GET / POST requests cross domain"
            ],
            "x_capec_skills_required": {
                "Low": "Some knowledge of Java Script"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Medium",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}