{
    "id": "bundle--27c311e8-e48a-4017-a0c5-9c987f5832ae",
    "objects": [
        {
            "created": "2017-04-15T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.",
            "external_references": [
                {
                    "external_id": "CAPEC-588",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/588.html"
                },
                {
                    "external_id": "CWE-79",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/79.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-83",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/83.html"
                },
                {
                    "description": "Reflected DOM Injection",
                    "source_name": "OWASP Attacks",
                    "url": "https://owasp.org/www-community/attacks/Reflected_DOM_Injection"
                },
                {
                    "description": "Amit Klein, DOM Based Cross Site Scripting or XSS of the Third Kind",
                    "external_id": "REF-471",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.webappsec.org/projects/articles/071105.shtml"
                },
                {
                    "description": "Jakob Kallin, Irene Lobo Valbuena, A comprehensive tutorial on cross-site scripting",
                    "external_id": "REF-472",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://excess-xss.com/"
                },
                {
                    "description": "OWASP Web Security Testing Guide, The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-618",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/11-Client-side_Testing/01-Testing_for_DOM-based_Cross_Site_Scripting.html"
                }
            ],
            "id": "attack-pattern--b1eef783-daae-494c-a418-cd9ada7cbe8b",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "DOM-Based XSS",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--70b83583-ffe3-4e6d-b4a6-61a9b9efc346"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges (A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.)"
                ],
                "Authorization": [
                    "Gain Privileges (A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.)"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.)"
                ],
                "Confidentiality": [
                    "Read Data (A successful DOM-based XSS attack can enable an adversary to exfiltrate sensitive information from the application.)",
                    "Gain Privileges (A successful DOM-based XSS attack can enable an adversary to elevate their privilege level and access functionality they should not otherwise be allowed to access.)",
                    "Execute Unauthorized Commands (A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.)"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (A successful DOM-based XSS attack can enable an adversary run arbitrary code of their choosing, thus enabling a complete compromise of the application.)",
                    "Modify Data (A successful DOM-based XSS attack can allow an adversary to tamper with application data.)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string.</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\">http://my.site.com/aform.html?mode=full</xhtml:div>\n               <xhtml:p>The application’s client-side code may want to print this mode value to the screen to give the users an understanding of what mode they are in. In this example, JavaScript is used to pull the value from the URL and update the HTML by dynamically manipulating the DOM via a document.write() call.</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\"><script>document.write(\"<p>Mode is: \" + document.location.href.substring(document.location.href.indexOf('mode=') + 5) + \"</p>\");</script></xhtml:div>\n               <xhtml:p>Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser:</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"attack\">http://my.site.com/aform.html?mode=<script>alert('hi');</script></xhtml:div>\n            ",
                "\n               <xhtml:p>In some DOM-based attacks, the malicious script never gets sent to the web server at all, thus bypassing any server-side protections that might be in place. Consider the previously used web application that displays the mode value. Since the HTML is being generated dynamically through DOM manipulations, a URL fragment (i.e., the part of a URL after the '#' character) can be used.</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"attack\">http://my.site.com/aform.html#mode=<script>alert('hi')</script></xhtml:div>\n               <xhtml:p>In this variation of a DOM-based XSS attack, the malicious script will not be sent to the web server, but will instead be managed by the victim's browser and is still available to the client-side script code.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey the application for user-controllable inputs: </b>Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a spidering tool to follow and record all links and analyze the web pages to find entry points. Make special note of any links that include parameters in the URL.</td></tr><tr><td>Use a proxy tool to record all links visited during a manual traversal of the web application.</td></tr><tr><td>Use a browser to manually explore the website and analyze how it is constructed. Many browsers' plugins are available to facilitate the analysis or automate the discovery.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Probe identified potential entry points for DOM-based XSS vulnerability: </b>The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various common script payloads and special characters to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited. Specific to DOM-based XSS, the adversary is looking for areas where input is being used to directly change the DOM.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a list of XSS probe strings to inject script in parameters of known URLs. If possible, the probe strings contain a unique identifier.</td></tr><tr><td>Use a proxy tool to record results of manual input of XSS probes in known URLs.</td></tr><tr><td>Use a list of HTML special characters to inject into parameters of known URLs and check if they were properly encoded, replaced, or filtered out.</td></tr></tbody></table><li> <p> <b>Craft malicious XSS URL: </b>Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim. In DOM-based XSS, the malicious script might not even be sent to the server, since the victim's browser will manipulate the DOM itself. This can help avoid serve-side detection mechanisms.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Change a URL parameter to include a malicious script tag.</td></tr><tr><td>Add a URL fragment to alter the value of the expected Document object URL.</td></tr><tr><td>Send information gathered from the malicious script to a remote endpoint.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Get victim to click URL: </b>In order for the attack to be successful, the victim needs to access the malicious URL.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.</td></tr><tr><td>Put the malicious URL on a public forum, where many victims might accidentally click the link.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_parent_of_refs": [
                "attack-pattern--89697649-1004-4130-a9dd-72182e4c6206",
                "attack-pattern--0e2bf24b-2931-45aa-a0e9-22eccfb310b2",
                "attack-pattern--b703f007-6e24-4365-b5f7-c5d249253b33",
                "attack-pattern--eade303a-1d70-4095-96da-5cf1d9f4333f",
                "attack-pattern--c77ec906-0371-482e-8b14-a4a41b6b5b74",
                "attack-pattern--66b042e0-f88f-4aa5-9d87-1e71a4b3dcd8",
                "attack-pattern--52b5f7dc-228b-44d5-865a-e4595b227ba2",
                "attack-pattern--28aff255-abc8-4392-872c-61f78d4fe55b",
                "attack-pattern--39322012-07ba-4bfc-bac7-10891614ee3e"
            ],
            "x_capec_prerequisites": [
                "An application that leverages a client-side web browser with scripting enabled.",
                "An application that manipulates the DOM via client-side scripting.",
                "An application that failS to adequately sanitize or encode untrusted input."
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack."
            ],
            "x_capec_skills_required": {
                "Medium": "Requires the ability to write scripts of some complexity and to inject it through user controlled fields in the system."
            },
            "x_capec_status": "Stable",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}