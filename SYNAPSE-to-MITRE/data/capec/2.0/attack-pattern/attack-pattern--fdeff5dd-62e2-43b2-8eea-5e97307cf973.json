{
    "id": "bundle--9b3910d2-98fd-496c-8a0b-3ca441c5ffcc",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.",
            "external_references": [
                {
                    "external_id": "CAPEC-27",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/27.html"
                },
                {
                    "external_id": "CWE-367",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/367.html"
                },
                {
                    "external_id": "CWE-61",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/61.html"
                },
                {
                    "external_id": "CWE-662",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/662.html"
                },
                {
                    "external_id": "CWE-689",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/689.html"
                },
                {
                    "external_id": "CWE-667",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/667.html"
                },
                {
                    "description": "Wikipedia, The Wikimedia Foundation, Inc",
                    "external_id": "REF-115",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://en.wikipedia.org/wiki/Symlink_race"
                },
                {
                    "description": "mkstemp (IEEE Std 1003.1, 2004 Edition), The Open Group Base Specifications Issue 6",
                    "external_id": "REF-116",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.opengroup.org/onlinepubs/009695399/functions/mkstemp.html"
                }
            ],
            "id": "attack-pattern--fdeff5dd-62e2-43b2-8eea-5e97307cf973",
            "modified": "2020-07-30T00:00:00.000Z",
            "name": "Leveraging Race Conditions via Symbolic Links",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--3da1844e-c905-420a-9179-260356a85a05"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Resource Consumption (Denial of Service)"
                ],
                "Confidentiality": [
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>In this naive example, the Unix program foo is setuid. Its function is to retrieve information for the accounts specified by the user. For \"efficiency,\" it sorts the requested accounts into a temporary file (/tmp/foo naturally) before making the queries.</xhtml:p>\n               <xhtml:p>The directory /tmp is world-writable. The malicious user creates a symbolic link to the file /.rhosts named /tmp/foo. Then, they invokes foo with \"user\" as the requested account. The program creates the (temporary) file /tmp/foo (really creating /.rhosts) and puts the requested account (e.g. \"user password\")) in it. It removes the temporary file (merely removing the symbolic link).</xhtml:p>\n               <xhtml:p>Now the /.rhosts contains + +, which is the incantation necessary to allow anyone to use rlogin to log into the computer as the superuser.</xhtml:p>\n               <xhtml:p>[REF-115]</xhtml:p>\n            ",
                "GNU \"ed\" utility (before 0.3) allows local users to overwrite arbitrary files via a symlink attack on temporary files, possibly in the open_sbuf function. See also: CVE-2006-6939",
                "OpenmosixCollector and OpenMosixView in OpenMosixView 1.5 allow local users to overwrite or delete arbitrary files via a symlink attack on (1) temporary files in the openmosixcollector directory or (2) nodes.tmp. See also: CVE-2005-0894",
                "Setuid product allows file reading by replacing a file being edited with a symlink to the targeted file, leaking the result in error messages when parsing fails. See also: CVE-2000-0972"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Verify that target host's platform supports symbolic links.: </b>This attack pattern is only applicable on platforms that support symbolic links.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Research target platform to determine whether it supports symbolic links.</td></tr><tr><td>Create a symbolic link and ensure that it works as expected on the given platform.</td></tr></tbody></table><li> <p> <b>Examine application's file I/O behavior: </b>Analyze the application's file I/O behavior to determine where it stores files, as well as the operations it performs to read/write files.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use kernel tracing utility such as ktrace to monitor application behavior.</td></tr><tr><td>Use debugging utility such as File Monitor to monitor the application's filesystem I/O calls</td></tr><tr><td>Watch temporary directories to see when temporary files are created, modified and deleted.</td></tr><tr><td>Analyze source code for open-source systems like Linux, Apache, etc.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Verify ability to write to filesystem: </b>The attacker verifies ability to write to the target host's file system.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create a file that does not exist in the target directory (e.g. \"touch temp.txt\" in UNIX-like systems)</td></tr><tr><td>On platforms that differentiate between file creation and file modification, if the target file that the application writes to already exists, attempt to modify it.</td></tr><tr><td>Verify permissions on target directory</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Replace file with a symlink to a sensitive system file.: </b>Between the time that the application checks to see if a file exists (or if the user has access to it) and the time the application actually opens the file, the attacker replaces the file with a symlink to a sensitive system file.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create an infinite loop containing commands such as \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\". Wait for an instance where the following steps occur in the given order: (1) Application ensures that tempfile.dat exists and that the user has access to it, (2) \"rm -f tempfile.dat; ln -s /etc/shadow tempfile.dat\", and (3) Application opens tempfile.dat for writing, and inadvertently opens /etc/shadow for writing instead.</td></tr><tr><td>Use other techniques with debugging tools to replace the file between the time the application checks the file and the time the application opens it.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "The attacker is able to create Symlink links on the target host.",
                "Tainted data from the attacker is used and copied to temporary files.",
                "The target host does insecure temporary file creation."
            ],
            "x_capec_skills_required": {
                "Medium": "This attack is sophisticated because the attacker has to overcome a few challenges such as creating symlinks on the target host during a precise timing, inserting malicious data in the temporary file and have knowledge about the temporary files created (file name and function which creates them)."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}