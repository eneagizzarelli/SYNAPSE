{
    "id": "bundle--612be2e7-2402-4065-9f51-d308b4383201",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.",
            "external_references": [
                {
                    "external_id": "CAPEC-231",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/231.html"
                },
                {
                    "external_id": "CWE-112",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/112.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-674",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/674.html"
                },
                {
                    "external_id": "CWE-770",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/770.html"
                },
                {
                    "description": "Shlomo, Yona, XML Parser Attacks: A summary of ways to attack an XML Parser, 2007",
                    "external_id": "REF-89",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://yeda.cs.technion.ac.il/~yona/talks/xml_parser_attacks/slides/slide2.html"
                }
            ],
            "id": "attack-pattern--247019da-353e-4910-9d11-7dc6c0421a17",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Oversized Serialized Data Payloads",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_alternate_terms": [
                "XML Denial of Service (XML DoS)"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--e171fd74-3ea6-4ad5-b0ff-71bb311c8024"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Resource Consumption",
                    "Execute Unauthorized Commands"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Execute Unauthorized Commands",
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p>An adversary determines the input data stream that is being processed by an serialized data parser on the victim's side.</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p>An adversary crafts input data that may have an adverse effect on the operation of the data parser when the data is parsed on the victim's system.</p></li></ol></div>",
            "x_capec_extended_description": "\n            <xhtml:p>Applications often need to transform data in and out of serialized data formats, such as XML and YAML, by using a data parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. By supplying oversized payloads in input vectors that will be processed by the parser, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization, and potentially cause execution of arbitrary code. An adversary's goal is to leverage parser failure to their advantage. DoS is most closely associated with web services, SOAP, and Rest, because remote service requesters can post malicious data payloads to the service provider designed to exhaust the service provider's memory, CPU, and/or disk space. This attack exploits the loosely coupled nature of web services, where the service provider has little to no control over the service requester and any messages the service requester sends.</xhtml:p>\n         ",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_parent_of_refs": [
                "attack-pattern--ee525a27-de33-45e9-ba7f-f63562001a5b",
                "attack-pattern--da41d572-d779-44a8-b8bf-530f49c32861"
            ],
            "x_capec_prerequisites": [
                "An application uses an parser for serialized data to perform transformation on user-controllable data.",
                "An application does not perform sufficient validation to ensure that user-controllable data is safe for a data parser."
            ],
            "x_capec_skills_required": {
                "High": "Arbitrary code execution",
                "Low": "Denial of service"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}