{
    "id": "bundle--0daa4322-a1b5-4c8c-921a-a801b8c76f42",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.",
            "external_references": [
                {
                    "external_id": "CAPEC-15",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/15.html"
                },
                {
                    "external_id": "CWE-146",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/146.html"
                },
                {
                    "external_id": "CWE-77",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/77.html"
                },
                {
                    "external_id": "CWE-184",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/184.html"
                },
                {
                    "external_id": "CWE-78",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/78.html"
                },
                {
                    "external_id": "CWE-185",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/185.html"
                },
                {
                    "external_id": "CWE-93",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/93.html"
                },
                {
                    "external_id": "CWE-140",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/140.html"
                },
                {
                    "external_id": "CWE-157",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/157.html"
                },
                {
                    "external_id": "CWE-138",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/138.html"
                },
                {
                    "external_id": "CWE-154",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/154.html"
                },
                {
                    "external_id": "CWE-697",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html"
                },
                {
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1",
                    "source_name": "reference_from_CAPEC"
                }
            ],
            "id": "attack-pattern--582943a5-d66c-48a9-8cf8-76e511222c7d",
            "modified": "2021-06-24T00:00:00.000Z",
            "name": "Command Delimiters",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--cde07b71-23e6-418d-93e9-665f5f83b032"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Read Data"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior.</xhtml:p>\n               <xhtml:p>LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Assess Target Runtime Environment: </b>In situations where the runtime environment is not implicitly known, the attacker makes connections to the target system and tries to determine the system's runtime environment. Knowing the environment is vital to choosing the correct delimiters.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Port mapping using network connection-based software (e.g., nmap, nessus, etc.)</td></tr><tr><td>Port mapping by exploring the operating system (netstat, sockstat, etc.)</td></tr><tr><td>TCP/IP Fingerprinting</td></tr><tr><td>Induce errors to find informative error messages</td></tr></tbody></table><li> <p> <b>Survey the Application: </b>The attacker surveys the target application, possibly as a valid and authenticated user</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Spidering web sites for all available links</td></tr><tr><td>Inventory all application inputs</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Attempt delimiters in inputs: </b>The attacker systematically attempts variations of delimiters on known inputs, observing the application's response each time.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Inject command delimiters using network packet injection tools (netcat, nemesis, etc.)</td></tr><tr><td>Inject command delimiters using web test frameworks (proxies, TamperData, custom programs, etc.)</td></tr><tr><td>Enter command delimiters directly in input fields.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Use malicious command delimiters: </b>The attacker uses combinations of payload and carefully placed command delimiters to attack the software.</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_parent_of_refs": [
                "attack-pattern--70c8a212-72da-4a98-a626-e5d38e5416e3"
            ],
            "x_capec_prerequisites": [
                "Software's input validation or filtering must not detect and block presence of additional malicious command."
            ],
            "x_capec_resources_required": [
                "Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
            ],
            "x_capec_skills_required": {
                "Medium": "The attacker has to identify injection vector, identify the specific commands, and optionally collect the output, i.e. from an interactive session."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}