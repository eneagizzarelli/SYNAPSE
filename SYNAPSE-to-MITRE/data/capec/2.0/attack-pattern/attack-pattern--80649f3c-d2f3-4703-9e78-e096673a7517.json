{
    "id": "bundle--cb093874-f68c-47db-965a-075d3fb41ffa",
    "objects": [
        {
            "created": "2020-12-17T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.",
            "external_references": [
                {
                    "external_id": "CAPEC-661",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/661.html"
                },
                {
                    "external_id": "CWE-489",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/489.html"
                },
                {
                    "description": "San-Tsai Sun, Andrea Cuadros, Konstantin Beznosov, Android Rooting: Methods, Detection, and Evasion, 2019--06---17, Technische Universit√§t Braunschweig",
                    "external_id": "REF-625",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://lersse-dl.ece.ubc.ca/record/310/files/p3.pdf?subformat=pdfa"
                },
                {
                    "description": "Jose Lopes, Who owns your runtime?, 2015--10---12, Nettitude Labs",
                    "external_id": "REF-626",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://labs.nettitude.com/blog/ios-and-android-runtime-and-anti-debugging-protections/#hooking"
                },
                {
                    "description": "Suresh Khutale, Android Root Detection Bypass by Reverse Engineering APK, 2018--03---06, InfoSec Institute",
                    "external_id": "REF-627",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://resources.infosecinstitute.com/topic/android-root-detection-bypass-reverse-engineering-apk/"
                },
                {
                    "description": "Manuel Egele, Christopher Kruegel, Engin Kirda, Giovanni Vigna, PiOS: Detecting Privacy Leaks in iOS Applications, 2011--02---09",
                    "external_id": "REF-628",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.ndss-symposium.org/wp-content/uploads/2017/09/egel.pdf"
                }
            ],
            "id": "attack-pattern--80649f3c-d2f3-4703-9e78-e096673a7517",
            "modified": "2020-12-17T00:00:00.000Z",
            "name": "Root/Jailbreak Detection Evasion via Debugging",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_can_precede_refs": [
                "attack-pattern--2b8d7aaf-bd4b-424f-8df4-6d0f37b72f4b",
                "attack-pattern--fa4feb09-657b-40a0-9edd-6187b55047e3"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--b289975f-c5e0-4d27-bf50-5937bfd02cfd"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Read Data (An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information.)"
                ],
                "Authorization": [
                    "Execute Unauthorized Commands (Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application.)",
                    "Gain Privileges"
                ],
                "Confidentiality": [
                    "Gain Privileges",
                    "Read Data (An adversary may leverage Root/Jailbreak Detection Evasion via Debugging in order to obtain sensitive information.)"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (Through Root/Jailbreak Detection Evasion via Debugging, the adversary compromises the integrity of the application.)"
                ]
            },
            "x_capec_domains": [
                "Software",
                "Hardware"
            ],
            "x_capec_example_instances": [
                "An adversary targets an iOS banking application in an attempt to compromise sensitive user data. The adversary launches the application with the iOS debugger and sets a breakpoint at the program entry point, after the application's signature has been verified. Next, the adversary dumps the memory region that contains the decrypted code from the address space of the binary. The 'Restrict' flag is then stripped from the application and the adversary resigns the application with a self-signed certificate. The application is now executed without the 'Restrict' flag, while trusting the self-signed certificate to be legitimate. However, the adversary is now able to evaded Jailbreak detection via code hooking or other methods and can glean user credentials and/or transaction details."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify application with attack potential: </b>The adversary searches for and identifies a mobile application that could be exploited for malicious purposes (e.g. banking, voting, or medical applications).</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Search application stores for mobile applications worth exploiting</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Debug the target application: </b>The adversary inserts the debugger into the program entry point of the mobile application, after the application's signature has been identified, to dump its memory contents.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Insert the debugger at the mobile application's program entry point, after the application's signature has been identified.</td></tr><tr><td>Dump the memory region containing the now decrypted code from the address space of the binary.</td></tr></tbody></table><li> <p> <b>Remove application signature verification methods: </b>Remove signature verification methods from the decrypted code and resign the application with a self-signed certificate.</p></li></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Execute the application and evade Root/Jailbreak detection methods: </b>The application executes with the self-signed certificate, while believing it contains a trusted certificate. This now allows the adversary to evade Root/Jailbreak detection via code hooking or other methods.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Optional: Hook code into the target application.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "A debugger must be able to be inserted into the targeted application."
            ],
            "x_capec_resources_required": [
                "The adversary must have a Rooted/Jailbroken mobile device with debugging capabilities."
            ],
            "x_capec_skills_required": {
                "High": "Knowledge about Root/Jailbreak detection and evasion techniques.",
                "Medium": "Knowledge about runtime debugging."
            },
            "x_capec_status": "Stable",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}