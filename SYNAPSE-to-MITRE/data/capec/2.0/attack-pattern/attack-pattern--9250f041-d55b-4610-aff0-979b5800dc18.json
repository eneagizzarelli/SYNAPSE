{
    "id": "bundle--de0cb051-4b18-4692-ae6c-323af93be110",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.",
            "external_references": [
                {
                    "external_id": "CAPEC-475",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/475.html"
                },
                {
                    "external_id": "CWE-347",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/347.html"
                },
                {
                    "external_id": "CWE-327",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/327.html"
                },
                {
                    "external_id": "CWE-295",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/295.html"
                },
                {
                    "description": "Kenn White, Microsoft's Chain of Fools, 2020--01---15, First Principles",
                    "external_id": "REF-562",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://blog.lessonslearned.org/chain-of-fools/"
                },
                {
                    "description": "Patch Critical Cryptographic Vulnerability in Microsoft Windows Clients and Servers, 2020--01---14, National Security Agency (NSA)",
                    "external_id": "REF-563",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://media.defense.gov/2020/Jan/14/2002234275/-1/-1/0/CSA-WINDOWS-10-CRYPT-LIB-20190114.PDF"
                },
                {
                    "description": "Thomas Ptacek, Thomas Pornin, Analysis of REF-563, Hacker News",
                    "external_id": "REF-564",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://news.ycombinator.com/item?id=22048619"
                }
            ],
            "id": "attack-pattern--9250f041-d55b-4610-aff0-979b5800dc18",
            "modified": "2022-02-22T00:00:00.000Z",
            "name": "Signature Spoofing by Improper Validation",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_can_precede_refs": [
                "attack-pattern--482cb9fc-0122-49f0-b6df-6d2d42098b0a"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--d94762c1-3c78-47eb-8212-e0c770ba43a9"
            ],
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "The Windows CryptoAPI (Crypt32.dll) was shown to be vulnerable to signature spoofing by failing to properly validate Elliptic Curve Cryptography (ECC) certificates. If the CryptoAPI's signature validator allows the specification of a nonstandard base point (G): \"An adversary can create a custom ECDSA certificate with an elliptic curve (ECC) signature that appears to match a known standard curve, like P-256 that includes a public key for an existing known trusted certificate authority, but which was in fact not signed by that certificate authority. Windows checks the public key and other curve parameters, but not the (bespoke adversary-supplied) base point generator (G) parameter constant which actually generated the curve\" [REF-562]. Exploiting this vulnerability allows the adversary to leverage a spoofed certificate to dupe trusted network connections and deliver/execute malicious code, while appearing as legitimately trusted entity [REF-563]. This ultimately tricks the victim into believing the malicious website or executable is legitimate and originates from a properly verified source. See also: CVE-2020-0601"
            ],
            "x_capec_extended_description": "\n            <xhtml:p>Signature verification algorithms are generally used to determine whether a certificate or piece of code (e.g. executable, binary, etc.) possesses a valid signature and can be trusted.</xhtml:p>\n            <xhtml:p>If the leveraged algorithm confirms that a valid signature exists, it establishes a foundation of trust that is further conveyed to the end-user when interacting with a website or application. However, if the signature verification algorithm improperly validates the signature, either by not validating the signature at all or by failing to fully validate the signature, it could result in an adversary generating a spoofed signature and being classified as a legitimate entity. Successfully exploiting such a weakness could further allow the adversary to reroute users to malicious sites, steals files, activates microphones, records keystrokes and passwords, wipes disks, installs malware, and more.</xhtml:p>\n         ",
            "x_capec_likelihood_of_attack": "Low",
            "x_capec_prerequisites": [
                "Recipient is using a weak cryptographic signature verification algorithm or a weak implementation of a cryptographic signature verification algorithm, or the configuration of the recipient's application accepts the use of keys generated using cryptographically weak signature verification algorithms."
            ],
            "x_capec_skills_required": {
                "High": "Reverse engineering and cryptanalysis of signature verification algorithm implementation"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}