{
    "id": "bundle--4ec90753-a203-4ab9-bf67-9d8bde7118d7",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.",
            "external_references": [
                {
                    "external_id": "CAPEC-279",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/279.html"
                },
                {
                    "external_id": "CWE-707",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/707.html"
                },
                {
                    "description": "Navya Sidharth, Jigang Liu, Intrusion Resistant SOAP Messaging with IAPF, 2008--12, IEEE",
                    "external_id": "REF-121",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://ieeexplore.ieee.org/document/4780783/"
                }
            ],
            "id": "attack-pattern--8e3a14fd-870a-4286-866d-805107c7d922",
            "modified": "2021-10-21T00:00:00.000Z",
            "name": "SOAP Manipulation",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_can_precede_refs": [
                "attack-pattern--7c90bef7-530c-427b-8fb7-f9d3eda9c26a",
                "attack-pattern--5cf3eacf-a0c6-4c59-9f97-4f677a90587a"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--b6f5248a-346f-484f-8091-8ab84288aa81"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Resource Consumption",
                    "Execute Unauthorized Commands"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Execute Unauthorized Commands"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands"
                ]
            },
            "x_capec_domains": [
                "Communications",
                "Software"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Exploit</h3><ol><li> <p> <b>Find target application: </b>The adversary needs to identify an application that uses SOAP as a communication protocol.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Observe HTTP traffic to an application and look for SOAP headers.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Detect Incorrect SOAP Parameter Handling: </b>The adversary tampers with the SOAP message parameters and looks for indications that the tampering caused a change in behavior of the targeted application.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Send more data than would seem reasonable for a field and see if the server complains.</td></tr><tr><td>Send nonsense data in a field that expects a certain subset, such as product names or sequence numbers, and see if the server complains.</td></tr><tr><td>Send XML metacharacters as data and see how the server responds.</td></tr></tbody></table><li> <p> <b>Manipulate SOAP parameters: </b>The adversary manipulates SOAP parameters in a way that causes undesirable behavior for the server. This can result in denial of service, information disclosure, arbitrary code exection, and more.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Create a recursive XML payload that will take up all of the memory on the server when parsed, resulting in a denial of service. This is known as the billion laughs attack.</td></tr><tr><td>Insert XML metacharacters into data fields that could cause the server to go into an error state when parsing. This could lead to a denial of service.</td></tr><tr><td>Insert a large amount of data into a field that should have a character limit, causing a buffer overflow.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "An application uses SOAP-based web service api.",
                "An application does not perform sufficient input validation to ensure that user-controllable data is safe for an XML parser.",
                "The targeted server either fails to verify that data in SOAP messages conforms to the appropriate XML schema, or it fails to correctly handle the complete range of data allowed by the schema."
            ],
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}