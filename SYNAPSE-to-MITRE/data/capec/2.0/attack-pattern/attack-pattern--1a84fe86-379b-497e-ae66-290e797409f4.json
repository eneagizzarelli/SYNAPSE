{
    "id": "bundle--c7a6516f-1e2a-475f-9ee5-61eb6ffa9a49",
    "objects": [
        {
            "created": "2017-01-06T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as \"..\" to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.",
            "external_references": [
                {
                    "external_id": "CAPEC-597",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/597.html"
                },
                {
                    "external_id": "CWE-36",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/36.html"
                }
            ],
            "id": "attack-pattern--1a84fe86-379b-497e-ae66-290e797409f4",
            "modified": "2021-10-21T00:00:00.000Z",
            "name": "Absolute Path Traversal",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--faf0ec21-da60-4efc-8c8e-7a6b63bea170"
            ],
            "x_capec_consequences": {
                "Availability": [
                    "Execute Unauthorized Commands (The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.)",
                    "Unreliable Execution (The attacker may be able to overwrite, delete, or corrupt unexpected critical files such as programs, libraries, or important data. This may prevent the software from working at all and in the case of a protection mechanisms such as authentication, it has the potential to lockout every user of the software.)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.)",
                    "Read Data (The attacker may be able read the contents of unexpected files and expose sensitive data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, by reading a password file, the attacker could conduct brute force password guessing attacks in order to break into an account on the system.)"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands (The attacker may be able to create or overwrite critical files that are used to execute code, such as programs or libraries.)",
                    "Modify Data (The attacker may be able to overwrite or create critical files, such as programs, libraries, or important data. If the targeted file is used for a security mechanism, then the attacker may be able to bypass that mechanism. For example, appending a new account at the end of a password file may allow an attacker to bypass authentication.)"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Fingerprinting of the operating system: </b>In order to perform a valid path traversal, the adversary needs to know what the underlying OS is so that the proper file seperator is used.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Port mapping. Identify ports that the system is listening on, and attempt to identify inputs and protocol types on those ports.</td></tr><tr><td>TCP/IP Fingerprinting. The adversary uses various software to make connections or partial connections and observe idiosyncratic responses from the operating system. Using those responses, they attempt to guess the actual operating system.</td></tr><tr><td>Induce errors to find informative error messages</td></tr></tbody></table><li> <p> <b>Survey application: </b>Using manual or automated means, an adversary will survey the target application looking for all areas where user input is taken to specify a file name or path.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a spidering tool to follow and record all links on a web page. Make special note of any links that include parameters in the URL.</td></tr><tr><td>Use a proxy tool to record all links visited during a manual traversal of a web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</td></tr><tr><td>Use a browser to manually explore a website and analyze how it is constructed. Many browser's plug-in are available to facilitate the analysis or automate the URL discovery.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Attempt variations on input parameters: </b>Using manual or automated means, an adversary attempts varying absolute file paths on all found user input locations and observes the responses.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Access common files in root directories such as \"/bin\", \"/boot\", \"/lib\", or \"/home\"</td></tr><tr><td>Access a specific drive letter or windows volume letter by specifying \"C:dirname\" for example</td></tr><tr><td>Access a known Windows UNC share by specifying \"\\\\UNC\\share\\name\" for example</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Access, modify, or execute arbitrary files.: </b>An adversary injects absolute path traversal syntax into identified vulnerable inputs to cause inappropriate reading, writing or execution of files. An adversary could be able to read directories or files which they are normally not allowed to read. The adversary could also access data outside the web document root, or include scripts, source code and other kinds of files from external websites. Once the adversary accesses arbitrary files, they could also modify files. In particular situations, the adversary could also execute arbitrary code or system commands.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Manipulate file and its path by injecting absolute path sequences (e.g. \"/home/file.txt\").</td></tr><tr><td>Download files, modify files, or try to execute shell commands (with binary files).</td></tr></tbody></table></ol></div>",
            "x_capec_prerequisites": [
                "The target must leverage and access an underlying file system."
            ],
            "x_capec_resources_required": [
                "The attacker must have access to an application interface or a direct shell that allows them to inject directory strings and monitor the results."
            ],
            "x_capec_skills_required": {
                "Low": "Simple command line attacks.",
                "Medium": "Programming attacks."
            },
            "x_capec_status": "Draft",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}