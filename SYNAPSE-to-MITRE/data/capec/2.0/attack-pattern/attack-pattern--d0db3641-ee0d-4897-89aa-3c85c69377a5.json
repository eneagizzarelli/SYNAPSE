{
    "id": "bundle--52da9219-85c0-4ef1-b710-7f720ca6d9ca",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.",
            "external_references": [
                {
                    "external_id": "CAPEC-36",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/36.html"
                },
                {
                    "external_id": "CWE-306",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/306.html"
                },
                {
                    "external_id": "CWE-693",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/693.html"
                },
                {
                    "external_id": "CWE-695",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/695.html"
                },
                {
                    "external_id": "CWE-1242",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/1242.html"
                }
            ],
            "id": "attack-pattern--d0db3641-ee0d-4897-89aa-3c85c69377a5",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Using Unpublished Interfaces or Functionality",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--f4186110-0c20-42fa-bc6f-d0ff9f700f91"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Confidentiality": [
                    "Read Data",
                    "Gain Privileges"
                ]
            },
            "x_capec_domains": [
                "Software",
                "Hardware"
            ],
            "x_capec_example_instances": [
                "To an extent, Google services (such as Google Maps) are all well-known examples. Calling these services, or extending them for one's own (perhaps very different) purposes is as easy as knowing they exist. Their unencumbered public use, however, is a purposeful aspect of Google's business model. Most organizations, however, do not have the same business model. Organizations publishing services usually fall back on thoughts that Attackers \"will not know services exist\" and that \"even if they did, they wouldn't be able to access them because they're not on the local LAN.\" Simple threat modeling exercises usually uncovers simple attack vectors that can invalidate these assumptions."
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify services: </b>Discover a service of interest by exploring service registry listings or by connecting on a known port or some similar means.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Search via internet for known, published services.</td></tr><tr><td>Use automated tools to scan known ports to identify internet-enabled services.</td></tr><tr><td>Dump the code from the chip and then perform reverse engineering to analyze the code.</td></tr></tbody></table><li> <p> <b>Authenticate to service: </b>Authenticate to the service, if required, in order to explore it.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use published credentials to access system.</td></tr><tr><td>Find unpublished credentials to access service.</td></tr><tr><td>Use other attack pattern or weakness to bypass authentication.</td></tr></tbody></table><li> <p> <b>Identify all interfaces: </b>Determine the exposed interfaces by querying the registry as well as probably sniffing to expose interfaces that are not explicitly listed.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>For any published services, determine exposed interfaces via the documentation provided.</td></tr><tr><td>For any services found, use error messages from poorly formed service calls to determine valid interfaces. In some cases, services will respond to poorly formed calls with valid ones.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Attempt to discover unpublished functions: </b>Using manual or automated means, discover unpublished or undocumented functions exposed by the service.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Manually attempt calls to the service using an educated guess approach, including the use of terms like' 'test', 'debug', 'delete', etc.</td></tr><tr><td>Use automated tools to scan the service to attempt to reverse engineer exposed, but undocumented, features.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Exploit unpublished functions: </b>Using information determined via experimentation, exploit the unpublished features of the service.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Execute features that are not intended to be used by general system users.</td></tr><tr><td>Craft malicious calls to features not intended to be used by general system users that take advantage of security flaws found in the functions.</td></tr></tbody></table></ol></div>",
            "x_capec_extended_description": "Adversaries can also search for undocumented bits on a hardware device, commonly known as \"chicken bits\". These bits are used to enable/disable certain functionality, but are not published. Adversaries can reverse engineer firmware to identify hidden features and change these bits at runtime to achieve malicious behavior.",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "The architecture under attack must publish or otherwise make available services that clients can attach to, either in an unauthenticated fashion, or having obtained an authentication token elsewhere. The service need not be 'discoverable', but in the event it isn't it must have some way of being discovered by an attacker. This might include listening on a well-known port. Ultimately, the likelihood of exploit depends on discoverability of the vulnerable service."
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack. Web service digging tools may be helpful."
            ],
            "x_capec_skills_required": {
                "Low": "A number of web service digging tools are available for free that help discover exposed web services and their interfaces. In the event that a web service is not listed, the attacker does not need to know much more in addition to the format of web service messages that they can sniff/monitor for."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}