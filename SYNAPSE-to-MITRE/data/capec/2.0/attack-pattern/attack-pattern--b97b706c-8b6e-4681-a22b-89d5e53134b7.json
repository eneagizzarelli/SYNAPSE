{
    "id": "bundle--df304f14-8cb4-4233-a2fc-f41d13e01809",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.",
            "external_references": [
                {
                    "external_id": "CAPEC-6",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/6.html"
                },
                {
                    "external_id": "CWE-74",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/74.html"
                },
                {
                    "external_id": "CWE-146",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/146.html"
                },
                {
                    "external_id": "CWE-184",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/184.html"
                },
                {
                    "external_id": "CWE-78",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/78.html"
                },
                {
                    "external_id": "CWE-185",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/185.html"
                },
                {
                    "external_id": "CWE-697",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html"
                },
                {
                    "description": "G. Hoglund, G. McGraw, Exploiting Software: How to Break Code, 2004--02, Addison-Wesley",
                    "external_id": "REF-1",
                    "source_name": "reference_from_CAPEC"
                },
                {
                    "description": "Jouko Pynnonen, Java Web Start argument injection vulnerability",
                    "external_id": "REF-482",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.securityfocus.com/archive/1/393696"
                }
            ],
            "id": "attack-pattern--b97b706c-8b6e-4681-a22b-89d5e53134b7",
            "modified": "2021-06-24T00:00:00.000Z",
            "name": "Argument Injection",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--cde07b71-23e6-418d-93e9-665f5f83b032"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Confidentiality": [
                    "Gain Privileges",
                    "Read Data"
                ],
                "Integrity": [
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "A recent example instance of argument injection occurred against Java Web Start technology, which eases the client side deployment for Java programs. The JNLP files that are used to describe the properties for the program. The client side Java runtime used the arguments in the property setting to define execution parameters, but if the attacker appends commands to an otherwise legitimate property file, then these commands are sent to the client command shell. [REF-482]"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Discovery of potential injection vectors: </b>Using an automated tool or manual discovery, the attacker identifies services or methods with arguments that could potentially be used as injection vectors (OS, API, SQL procedures, etc.).</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Manually cover the application and record the possible places where arguments could be passed into external systems.</td></tr><tr><td>Use a spider, for web applications, to create a list of URLs and associated inputs.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>1. Attempt variations on argument content: </b>Possibly using an automated tool, the attacker will perform injection variations of the arguments.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a very large list of probe strings in order to detect if there is a positive result, and, what type of system has been targeted (if obscure).</td></tr><tr><td>Use a proxy tool to record results, error messages and/or log if accessible.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Abuse of the application: </b>The attacker injects specific syntax into a particular argument in order to generate a specific malicious effect in the targeted application.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Manually inject specific payload into targeted argument.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions.",
                "Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client."
            ],
            "x_capec_resources_required": [
                "Ability to communicate synchronously or asynchronously with server. Optionally, ability to capture output directly through synchronous communication or other method such as FTP."
            ],
            "x_capec_skills_required": {
                "Medium": "The attacker has to identify injection vector, identify the operating system-specific commands, and optionally collect the output."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}