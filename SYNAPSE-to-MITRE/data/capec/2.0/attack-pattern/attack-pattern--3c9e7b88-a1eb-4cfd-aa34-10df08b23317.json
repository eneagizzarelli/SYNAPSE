{
    "id": "bundle--cc6d3101-4b98-4836-be14-c82e41169353",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.",
            "external_references": [
                {
                    "external_id": "CAPEC-186",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/186.html"
                },
                {
                    "external_id": "CWE-494",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/494.html"
                },
                {
                    "description": "Supply Chain Compromise: Compromise Software Supply Chain",
                    "external_id": "T1195.002",
                    "source_name": "ATTACK",
                    "url": "https://attack.mitre.org/wiki/Technique/T1195/002"
                },
                {
                    "description": "Microsoft Defender Security Research Team, New ransomware, old techniques: Petya adds worm capabilities, 2017, Microsoft",
                    "external_id": "REF-697",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.microsoft.com/security/blog/2017/06/27/new-ransomware-old-techniques-petya-adds-worm-capabilities/"
                }
            ],
            "id": "attack-pattern--3c9e7b88-a1eb-4cfd-aa34-10df08b23317",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Malicious Software Update",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--582f33d6-0aa7-4f34-a91e-d767a65adad1"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Execute Unauthorized Commands (Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.)"
                ],
                "Availability": [
                    "Execute Unauthorized Commands (Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.)"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands (Utilize the built-in software update mechanisms of the commercial components to deliver software that could compromise security credentials, enable a denial-of-service attack, or enable tracking.)"
                ]
            },
            "x_capec_domains": [
                "Social Engineering",
                "Supply Chain",
                "Software"
            ],
            "x_capec_example_instances": [
                "Using an automated process to download and install dangerous code was key part of the NotPeyta attack [REF-697]"
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Identify target: </b>The adversary must first identify what they want their target to be. Because malicious software updates can be carried out in a variety of ways, the adversary will first not only identify a target program, but also what users they wish to target. This attack can be targeted (a particular user or group of users) or untargeted (many different users).</p></li></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Craft a deployment mechanism based on the target: </b>The adversary must craft a deployment mechanism to deploy the malicious software update. This mechanism will differ based on if the attack is targeted or untargeted.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Targeted attack: hosting what appears to be a software update, then harvesting actual email addresses for an organization, or generating commonly used email addresses, and then sending spam, phishing, or spear-phishing emails to the organization's users requesting that they manually download and install the malicious software update.</td></tr><tr><td>Targeted attack: Instant Messaging virus payload, which harvests the names from a user's contact list and sends instant messages to those users to download and apply the update</td></tr><tr><td>Untargeted attack: Spam the malicious update to as many users as possible through unsolicited email, instant messages, or social media messages.</td></tr><tr><td>Untargeted attack: Send phishing emails to as many users as possible and pretend to be a legitimate source suggesting to download an important software update.</td></tr><tr><td>Untargeted attack: Use trojans/botnets to aid in either of the two untargeted attacks.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Deploy malicious software update: </b>Using the deployment mechanism from the previous step, the adversary gets a user to install the malicious software update.</p></li></ol></div>",
            "x_capec_extended_description": "\n            <xhtml:p>Although there are several variations to this strategy of attack, the attack methods are united in that all rely on the ability of an adversary to position and disguise malicious content such that it masquerades as a legitimate software update which is then processed by a program, undermining application integrity.</xhtml:p>\n            <xhtml:p>As such the attack employs 'spoofing' techniques augmented by psychological or technological mechanisms to disguise the update and/or its source. Virtually all software requires frequent updates or patches, giving the adversary immense latitude when structuring the attack, as well as many targets of opportunity. Automated attacks involving malicious software updates require little to no user-directed activity and are therefore advantageous because they avoid the complex preliminary setup stages of manual attacks, which must effectively 'hook' users while avoiding countermeasures such as spam filters or web security filters.</xhtml:p>\n         ",
            "x_capec_parent_of_refs": [
                "attack-pattern--82c8819d-01ad-4e23-a715-f92f2333c009",
                "attack-pattern--83c7d2ff-f74e-471b-bd10-28421e818719",
                "attack-pattern--b974175d-c76a-4168-af55-ea0cb0695286",
                "attack-pattern--9b9760ba-c8de-42c7-9de0-3a5ee2d2abdb"
            ],
            "x_capec_resources_required": [
                "Manual or user-assisted attacks require deceptive mechanisms to trick the user into clicking a link or downloading and installing software. Automated update attacks require the adversary to host a payload and then trigger the installation of the payload code."
            ],
            "x_capec_skills_required": {
                "High": "This attack requires advanced cyber capabilities"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}