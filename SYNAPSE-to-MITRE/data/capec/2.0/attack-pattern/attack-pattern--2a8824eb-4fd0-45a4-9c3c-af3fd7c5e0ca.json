{
    "id": "bundle--ff333c97-6dff-490f-80c6-adb5e0d9c3ce",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.",
            "external_references": [
                {
                    "external_id": "CAPEC-182",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/182.html"
                },
                {
                    "external_id": "CWE-20",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/20.html"
                },
                {
                    "external_id": "CWE-184",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/184.html"
                },
                {
                    "external_id": "CWE-697",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/697.html"
                },
                {
                    "description": "Stefano Di Paola, Finding Vulnerabilities in Flash Applications, OWASP Appsec 2007, 2007--11---15",
                    "external_id": "REF-46",
                    "source_name": "reference_from_CAPEC"
                },
                {
                    "description": "Rudra K. Sinha Roy, A Lazy Pen Tester's Guide to Testing Flash Applications, iViz",
                    "external_id": "REF-47",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.ivizsecurity.com/blog/web-application-security/testing-flash-applications-pen-tester-guide/"
                },
                {
                    "description": "Peleus Uhley, Creating More Secure SWF Web Application, Adobe Systems Incorporated",
                    "external_id": "REF-48",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.adobe.com/devnet/flashplayer/articles/secure_swf_apps.html"
                }
            ],
            "id": "attack-pattern--2a8824eb-4fd0-45a4-9c3c-af3fd7c5e0ca",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Flash Injection",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--cde07b71-23e6-418d-93e9-665f5f83b032"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Bypass Protection Mechanism"
                ],
                "Accountability": [
                    "Gain Privileges"
                ],
                "Authentication": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Gain Privileges",
                    "Bypass Protection Mechanism"
                ],
                "Confidentiality": [
                    "Other (Information Leakage)",
                    "Read Data"
                ],
                "Integrity": [
                    "Modify Data"
                ],
                "Non-Repudiation": [
                    "Gain Privileges"
                ]
            },
            "x_capec_domains": [
                "Social Engineering",
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>In the following example, the SWF file contains</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\">getURL('javascript:SomeFunc(\"someValue\")','','GET')</xhtml:div>\n               <xhtml:p>A request like</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\">http://example.com/noundef.swf?a=0:0;alert('XSS')</xhtml:div>\n               <xhtml:p>becomes</xhtml:p>\n               <xhtml:div style=\"margin-left:1em;\" class=\"informative\">javascript:SomeFunc(\"someValue\")?a=0:0;alert(123)</xhtml:div>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Find Injection Entry Points: </b>The attacker first takes an inventory of the entry points of the application.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Spider the website for all available URLs that reference a Flash application.</td></tr><tr><td>List all uninitialized global variables (such as _root.*, _global.*, _level0.*) in ActionScript, registered global variables in included files, load variables to external movies.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Determine the application's susceptibility to Flash injection: </b>Determine the application's susceptibility to Flash injection. For each URL identified in the explore phase, the attacker attempts to use various techniques such as direct load asfunction, controlled evil page/host, Flash HTML injection, and DOM injection to determine whether the application is susceptible to Flash injection.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Test the page using direct load asfunction, getURL,javascript:gotRoot(\"\")///d.jpg</td></tr><tr><td>Test the page using controlled evil page/host, http://example.com/evil.swf</td></tr><tr><td>Test the page using Flash HTML injection, \"'><img src='asfunction:getURL,javascript:gotRoot(\"\")//.jpg' ></td></tr><tr><td>Test the page using DOM injection, (gotRoot(''))</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Inject malicious content into target: </b>Inject malicious content into target utilizing vulnerable injection vectors identified in the Experiment phase</p></li></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_parent_of_refs": [
                "attack-pattern--8bd0c718-f126-4397-9754-c5225da7b696",
                "attack-pattern--4ce65b20-6d2c-4217-b08a-e87b36c22353"
            ],
            "x_capec_prerequisites": [
                "The target must be capable of running Flash applications. In some cases, the victim must follow an attacker-supplied link."
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack. The attacker may need to be able to serve the injected Flash content."
            ],
            "x_capec_skills_required": {
                "Medium": "The attacker needs to have knowledge of Flash, especially how to insert content the executes commands."
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Medium",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}