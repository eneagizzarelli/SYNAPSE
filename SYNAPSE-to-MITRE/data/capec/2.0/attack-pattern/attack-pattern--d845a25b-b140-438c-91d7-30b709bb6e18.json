{
    "id": "bundle--39a4f2ba-844c-4f6a-880e-f2fd49924976",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "\n            <xhtml:p>An adversary abuses the flexibility and discrepancies in the parsing and interpretation of HTTP Request messages using various HTTP headers, request-line and body parameters as well as message sizes (denoted by the end of message signaled by a given HTTP header) by different intermediary HTTP agents (e.g., load balancer, reverse proxy, web caching proxies, application firewalls, etc.) to secretly send unauthorized and malicious HTTP requests to a back-end HTTP agent (e.g., web server).</xhtml:p>\n            <xhtml:p>See CanPrecede relationships for possible consequences.</xhtml:p>\n         ",
            "external_references": [
                {
                    "external_id": "CAPEC-33",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/33.html"
                },
                {
                    "external_id": "CWE-444",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/444.html"
                },
                {
                    "description": "HTTP Request Smuggling",
                    "external_id": "26",
                    "source_name": "WASC",
                    "url": "http://projects.webappsec.org/HTTP-Request-Smuggling"
                },
                {
                    "description": "HTTP 1.1 Specification (RFC 2616), IETF RFC",
                    "external_id": "REF-38",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.ietf.org/rfc/rfc2616.txt"
                },
                {
                    "description": "HTTP Response Smuggling, Beyond Security",
                    "external_id": "REF-117",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.securiteam.com/securityreviews/5CP0L0AHPC.html"
                },
                {
                    "description": "OWASP Web Security Testing Guide, The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-617",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/15-Testing_for_HTTP_Splitting_Smuggling.html"
                },
                {
                    "description": "Robert Auger, HTTP Request Smuggling, 2010--01, The Web Application Security Consortium",
                    "external_id": "REF-672",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://projects.webappsec.org/w/page/13246928/HTTP%20Request%20Smuggling"
                },
                {
                    "description": "Dzevad Alibegovic, HTTP Request Smuggling: Complete Guide to Attack Types and Prevention, 2021--08---23, NeuraLegion",
                    "external_id": "REF-673",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.neuralegion.com/blog/http-request-smuggling-hrs/"
                },
                {
                    "description": "Busra Demir, A Pentesterâ€™s Guide to HTTP Request Smuggling, 2020--10---15, Cobalt",
                    "external_id": "REF-674",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://cobalt.io/blog/a-pentesters-guide-to-http-request-smuggling"
                },
                {
                    "description": "Edi Kogan, Daniel Kerman, HTTP Desync Attacks in the Wild and How to Defend Against Them, 2019--10---29, Imperva",
                    "external_id": "REF-678",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.imperva.com/blog/http-desync-attacks-and-defence-methods/"
                },
                {
                    "description": "James Kettle, HTTP Desync Attacks: Request Smuggling Reborn, 2019--08---07, PortSwigger",
                    "external_id": "REF-681",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://portswigger.net/research/http-desync-attacks-request-smuggling-reborn"
                },
                {
                    "description": "HTTP request smuggling, PortSwigger",
                    "external_id": "REF-682",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://portswigger.net/web-security/request-smuggling"
                },
                {
                    "description": "Finding HTTP request smuggling vulnerabilities, PortSwigger",
                    "external_id": "REF-683",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://portswigger.net/web-security/request-smuggling/finding"
                },
                {
                    "description": "Exploiting HTTP request smuggling vulnerabilities, PortSwigger",
                    "external_id": "REF-684",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://portswigger.net/web-security/request-smuggling/exploiting"
                }
            ],
            "id": "attack-pattern--d845a25b-b140-438c-91d7-30b709bb6e18",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "HTTP Request Smuggling",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_alternate_terms": [
                "HTTP Desync"
            ],
            "x_capec_can_precede_refs": [
                "attack-pattern--8f665166-dfd1-40cb-91e8-b78bee1ceb6a",
                "attack-pattern--e244a53a-8c69-462c-8ff2-900a839d48cb",
                "attack-pattern--70b83583-ffe3-4e6d-b4a6-61a9b9efc346",
                "attack-pattern--63f43efb-7a34-4302-b3dc-8245100fdea9",
                "attack-pattern--bd4f8f46-1bc7-40a9-b15a-e36b7671cf5b",
                "attack-pattern--ce92f5b9-6228-4354-8a1b-72ad7ad3bb84"
            ],
            "x_capec_child_of_refs": [
                "attack-pattern--9c983530-1927-43ca-addd-63d149cda4a7"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Gain Privileges"
                ],
                "Availability": [
                    "Execute Unauthorized Commands"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands",
                    "Gain Privileges"
                ],
                "Integrity": [
                    "Execute Unauthorized Commands",
                    "Modify Data"
                ]
            },
            "x_capec_domains": [
                "Communications",
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:p>When using Haproxy 1.5.3 version as front-end proxy server with with Node.js version 14.13.1 or 12.19.0 as the back-end web server it is possible to use two same header fields for example: two Transfer-Encoding, Transfer-Encoding: chunked and Transfer-Encoding: chunked-false, to bypass Haproxy /flag URI restriction and receive the Haproxy flag value, since Node.js identifies the first header but ignores the second header. See also: CVE-2020-8287</xhtml:p>\n            ",
                "\n               <xhtml:p>When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276</xhtml:p>\n            ",
                "\n               <xhtml:p>Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both \"Content-Length\" and a \"Transfer-Encoding: chunked\" headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with \"Transfer-Encoding: chunked\" header without replacing the existing \"Content-Length\" header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with \"Content-Length: 0\". See also: CVE-2005-2088</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey network to identify target: </b>The adversary performs network reconnaissance by monitoring relevant traffic to identify the network path and parsing of the HTTP messages with the goal of identifying potential targets.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Scan networks to fingerprint HTTP infrastructure and monitor HTTP traffic to identify HTTP network path with a tool such as a Network Protocol Analyzer.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Identify vulnerabilities in targeted HTTP infrastructure and technologies: </b>The adversary sends a variety of benign/ambiguous HTTP requests to observe responses from HTTP infrastructure in order to identify differences/discrepancies in the interpretation and parsing of HTTP requests by examining supported HTTP protocol versions, message sizes, and HTTP headers.</p></li><li> <p> <b>Cause differential HTTP responses by experimenting with identified HTTP Request vulnerabilities: </b>The adversary sends maliciously crafted HTTP requests to interfere with the parsing of intermediary and back-end HTTP infrastructure, followed by normal/benign HTTP request from the adversary or a random user. The intended consequences of the malicious HTTP requests will be observed in the HTTP infrastructure response to the normal/benign HTTP request to confirm applicability of identified vulnerabilities in the adversary's plan of attack.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Continue the monitoring of HTTP traffic.</td></tr><tr><td>\n                  <xhtml:p>Utilize various combinations of HTTP Headers within a single HTTP Request such as: Content-Length & Transfer-Encoding (CL;TE), Transfer-Encoding & Content-Length (TE;CL), or double Transfer-Encoding (TE;TE), so that additional embedded requests or data in the body of the original request are unprocessed and treated as part of subsequent requests by the intended target HTTP agent.</xhtml:p>\n                  <xhtml:p>From these HTTP Header combinations the adversary observes any timing delays (usually in the form of HTTP 404 Error response) or any other unintended consequences.</xhtml:p>\n                  <xhtml:ul>\n                     <xhtml:li>For CL;TE and TE;CL HTTP header combinations, the first HTTP agent, in the HTTP message path that receives the HTTP request, takes precedence or only processes one header but not the other, while the second/final HTTP agent processes the opposite header, allowing for embedded HTTP requests to be ignored and smuggled to the intended target HTTP agent.</xhtml:li>\n                     <xhtml:li>For TE;TE HTTP headers combination, all HTTP agents in HTTP message path process Transfer-Encoding header, however, adversary obfuscation (see Mitigations for details) of one of the Transfer-Encoding headers, by not adhering strictly to the protocol specification, can cause it to be unprocessed/ignored by a designated HTTP agent, hence allowing embedded HTTP requests to be smuggled. .</xhtml:li>\n                  </xhtml:ul>\n               </td></tr><tr><td>\n                  <xhtml:p>Construct a very large HTTP request using multiple Content-Length headers of various data lengths that can potentially cause subsequent requests to be ignored by an intermediary HTTP agent (firewall) and/or eventually parsed separately by the target HTTP agent (web server).</xhtml:p>\n                  <xhtml:p>Note that most modern HTTP infrastructure reject HTTP requests with multiple Content-Length headers.</xhtml:p>\n               </td></tr><tr><td>Follow an unrecognized (sometimes a RFC compliant) HTTP header with a subsequent HTTP request to potentially cause the HTTP request to be ignored and interpreted as part of the preceding HTTP request.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Perform HTTP Request Smuggling attack: </b>Using knowledge discovered in the experiment section above, smuggle a message to cause one of the consequences.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Leverage techniques identified in the Experiment Phase.</td></tr></tbody></table></ol></div>",
            "x_capec_extended_description": "\n            <xhtml:p>A maliciously crafted HTTP request, which contains a second secretly embedded HTTP request is interpreted by an intermediary web proxy as single benign HTTP request, is forwarded to a back-end server, that interprets and parses the HTTP request as two authorized benign HTTP requests bypassing security controls.</xhtml:p>\n            <xhtml:p>This attack usually involves the misuse of the HTTP headers: Content-Length and Transfer-Encoding. These abuses are discussed in RFC 2616 #4.4.3 and section #4.2 and are related to ordering and precedence of these headers. [REF-38]</xhtml:p>\n            <xhtml:p>Additionally this attack can be performed through modification and/or fuzzing of parameters composing the request-line of HTTP messages.</xhtml:p>\n            <xhtml:p>This attack is usually the result of the usage of outdated or incompatible HTTP protocol versions in the HTTP agents.</xhtml:p>\n            <xhtml:p>This differs from CAPEC-273 HTTP Response Smuggling, which is usually an attempt to compromise a client agent (e.g., web browser) by sending malicious content in HTTP responses from back-end HTTP infrastructure. HTTP Request Smuggling is an attempt to compromise a<xhtml:i>back-end HTTP agent</xhtml:i>via HTTP Request messages.</xhtml:p>\n            <xhtml:p>HTTP Splitting (CAPEC-105 and CAPEC-34) is different from HTTP Smuggling due to the fact that during implementation of asynchronous requests, HTTP Splitting requires the embedding/injection of arbitrary HTML headers and content through user input into browser cookies or Ajax web/browser object parameters like XMLHttpRequest.</xhtml:p>\n         ",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_peer_of_refs": [
                "attack-pattern--ae3f2c33-9018-442e-9cc3-24d65c7f4974"
            ],
            "x_capec_prerequisites": [
                "An additional intermediary HTTP agent such as an application firewall or a web caching proxy between the adversary and the second agent such as a web server, that sends multiple HTTP messages over same network connection.",
                "Differences in the way the two HTTP agents parse and interpret HTTP requests and its headers.",
                "HTTP agents running on HTTP/1.1 that allow for Keep Alive mode, Pipelined queries, and Chunked queries and responses."
            ],
            "x_capec_resources_required": [
                "Tools capable of crafting malicious HTTP messages and monitoring HTTP message responses."
            ],
            "x_capec_skills_required": {
                "Medium": "Possess knowledge on the exact details in the discrepancies between several targeted HTTP agents in path of an HTTP message in parsing its message structure and individual headers."
            },
            "x_capec_status": "Stable",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}