{
    "id": "bundle--910c33b2-e435-48f3-9766-e01307511036",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.",
            "external_references": [
                {
                    "external_id": "CAPEC-187",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/187.html"
                },
                {
                    "external_id": "CWE-494",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/494.html"
                },
                {
                    "description": "Software Deployment Tools",
                    "external_id": "T1072",
                    "source_name": "ATTACK",
                    "url": "https://attack.mitre.org/wiki/Technique/T1072"
                }
            ],
            "id": "attack-pattern--82c8819d-01ad-4e23-a715-f92f2333c009",
            "modified": "2022-02-22T00:00:00.000Z",
            "name": "Malicious Automated Software Update via Redirection",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--3c9e7b88-a1eb-4cfd-aa34-10df08b23317"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Execute Unauthorized Commands"
                ],
                "Availability": [
                    "Execute Unauthorized Commands"
                ],
                "Confidentiality": [
                    "Execute Unauthorized Commands"
                ]
            },
            "x_capec_domains": [
                "Supply Chain",
                "Software"
            ],
            "x_capec_extended_description": "\n            <xhtml:p>One predominate type of redirection attack requires DNS spoofing or hijacking of a domain name corresponding to an update server. The target software initiates an update request and the DNS request resolves the domain name of the update server to the IP address of the attacker, at which point the software accepts updates either transmitted by or pulled from the attackers' server. Attacks against DNS mechanisms comprise an initial phase of a chain of attacks that facilitate automated update hijacking attack, and such attacks have a precedent in targeted activities that have been as complex as DNS/BIND attacks of corporate infrastructures, to untargeted attacks aimed at compromising home broadband routers, as well as attacks involving the compromise of wireless access points, as well as 'evil twin' attacks coupled with DNS redirection. Due to the plethora of options open to the attacker in forcing name resolution to arbitrary servers the Automated Update Hijacking attack strategies are the tip of the spear for many multi-stage attack chains.</xhtml:p>\n            <xhtml:p>The second weakness that is exploited by the attacker is the lack of integrity checking by the software in validating the update. Software which relies only upon domain name resolution to establish the identity of update code is particularly vulnerable, because this signals an absence of other security countermeasures that could be applied to invalidate the attackers' payload on basis of code identity, hashing, signing, encryption, and other integrity checking mechanisms. Redirection-based attack patterns work equally well against client-side software as well as local servers or daemons that provide software update functionality.</xhtml:p>\n         ",
            "x_capec_likelihood_of_attack": "High",
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}