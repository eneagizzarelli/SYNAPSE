{
    "id": "bundle--6cbb30d6-316a-454b-b012-16c2111079ce",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An attacker leverages an adversary in the middle attack (CAPEC-94) in order to bypass the same origin policy protection in the victim's browser. This active adversary in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS.",
            "external_references": [
                {
                    "external_id": "CAPEC-466",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/466.html"
                },
                {
                    "external_id": "CWE-300",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/300.html"
                },
                {
                    "description": "Roi Saltzman, Adi Sharabani, Active Man in the Middle Attacks, 2009--02---02, IBM Rational Application Security Group",
                    "external_id": "REF-403",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://blog.watchfire.com/wfblog/2009/02/active-man-in-the-middle-attacks.html"
                }
            ],
            "id": "attack-pattern--797a5be6-23ff-41bb-be85-51a9976867dd",
            "modified": "2022-02-22T00:00:00.000Z",
            "name": "Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Standard",
            "x_capec_child_of_refs": [
                "attack-pattern--38964770-4f39-4191-89cf-73a625162b2b"
            ],
            "x_capec_consequences": {
                "Authorization": [
                    "Execute Unauthorized Commands"
                ],
                "Confidentiality": [
                    "Read Data"
                ]
            },
            "x_capec_domains": [
                "Communications",
                "Software"
            ],
            "x_capec_extended_description": "\n            <xhtml:p>When an attacker intercepts a response bound to the victim, an attacker adds an iFrame (which is possibly invisible) to the response referencing some domain with sensitive functionality and forwards the response to the victim. The victim's browser than automatically initiates an unauthorized request to the site with sensitive functionality. The same origin policy would prevent making these requests to a site other than the one from which the Java Script came, but the attacker once again uses active adversary in the middle to intercept these automatic requests and redirect them to the domain / service with sensitive functionality. Any persistent cookies that the victim has in their browser would be used for these unauthorized requests. The attacker thus actively directs the victim to a site with sensitive functionality. When the site with sensitive functionality responds back to the victim's request, an active adversary in the middle attacker intercepts these responses, injects their own malicious Java Script into these responses, and forwards to the victim's browser. In the victim's browser, that Java Script executes under the restrictions of the site with sensitive functionality and can be used to continue to interact with the sensitive site. So an attacker can execute scripts within the victim's browser on any domains the attacker desires. The attacker is able to use this technique to steal cookies from the victim's browser for whatever site the attacker wants. This applies to both persistent cookies and HTTP only cookies (unlike traditional XSS attacks). An attacker is also able to use this technique to steal authentication credentials for sites that only encrypt the login form, but do not require a secure channel for the initial request to get to the page with the login form. Further the attacker is also able to steal any autocompletion information. This attack pattern can also be used to enable session fixation and cache poisoning attacks. Additional attacks can be enabled as well.</xhtml:p>\n         ",
            "x_capec_prerequisites": [
                "The victim and the attacker are both in an environment where an active adversary in the middle attack is possible (e.g., public WIFI hot spot)The victim visits at least one website that does not use TLS / SSL"
            ],
            "x_capec_skills_required": {
                "Low": "Ability to intercept and modify requests / responses",
                "Medium": "Solid understanding of the HTTP protocol"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Medium",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}