{
    "id": "bundle--c7b7ed0f-0f43-4949-9ad3-0a0c69d34234",
    "objects": [
        {
            "created": "2014-06-23T00:00:00.000Z",
            "created_by_ref": "identity--e50ab59c-5c4f-4d40-bf6a-d58418d89bcd",
            "description": "An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their \"to be signed\" parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.",
            "external_references": [
                {
                    "external_id": "CAPEC-459",
                    "source_name": "capec",
                    "url": "https://capec.mitre.org/data/definitions/459.html"
                },
                {
                    "external_id": "CWE-327",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/327.html"
                },
                {
                    "external_id": "CWE-295",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/295.html"
                },
                {
                    "external_id": "CWE-290",
                    "source_name": "cwe",
                    "url": "http://cwe.mitre.org/data/definitions/290.html"
                },
                {
                    "description": "Alexander Sotirov, Marc Stevens, Jacob Appelbaum, Arjen Lenstra, David Molnar, Dag Arne Osvik, Benne de Weger, MD5 Considered Harmful Today: Creating a Rogue CA Certificate, 2008--12---30, Phreedom.org",
                    "external_id": "REF-395",
                    "source_name": "reference_from_CAPEC",
                    "url": "http://www.phreedom.org/research/rogue-ca/"
                },
                {
                    "description": "Alexander Sotirov, Marc Stevens, Jacob Appelbaum, Arjen Lenstra, David Molnar, Dag Arne Osvik, Benne de Weger, MD5 considered harmful today, 2009--12",
                    "external_id": "REF-587",
                    "source_name": "reference_from_CAPEC",
                    "url": "https://www.win.tue.nl/hashclash/rogue-ca/#Ref"
                }
            ],
            "id": "attack-pattern--138c8405-1295-44b9-b2ed-3b4cd15c2a55",
            "modified": "2022-09-29T00:00:00.000Z",
            "name": "Creating a Rogue Certification Authority Certificate",
            "object_marking_refs": [
                "marking-definition--17d82bb2-eeeb-4898-bda5-3ddbcd2b799d"
            ],
            "type": "attack-pattern",
            "x_capec_abstraction": "Detailed",
            "x_capec_child_of_refs": [
                "attack-pattern--d94762c1-3c78-47eb-8212-e0c770ba43a9"
            ],
            "x_capec_consequences": {
                "Access_Control": [
                    "Gain Privileges"
                ],
                "Authentication": [
                    "Gain Privileges"
                ]
            },
            "x_capec_domains": [
                "Software"
            ],
            "x_capec_example_instances": [
                "\n               <xhtml:b>MD5 Collisions</xhtml:b>\n               <xhtml:p>The MD5 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.</xhtml:p>See also: CVE-2004-2761",
                "\n               <xhtml:b>SHA1 Collisions</xhtml:b>\n               <xhtml:p>The SHA1 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.</xhtml:p>See also: CVE-2005-4900",
                "\n               <xhtml:b>PKI Infrastructure vulnerabilities</xhtml:b>\n               <xhtml:p>Research has show significant vulnerabilities in PKI infrastructure. Trusted certificate authorities have been shown to use weak hashing algorithms after attacks have been demonstrated against those algorithms. Additionally, reliable methods have been demonstrated for generated MD5 collisions that could be used to generate malicious CSRs.</xhtml:p>\n            "
            ],
            "x_capec_execution_flow": "<h2> Execution Flow </h2><div><h3>Experiment</h3><ol><li> <p> <b>Craft Certificates: </b>The adversary crafts two different, but valid X.509 certificates that when hashed with an insufficiently collision resistant hashing algorithm would yield the same value.</p></li><li> <p> <b>Send CSR to Certificate Authority: </b>The adversary sends the CSR for one of the certificates to the Certification Authority which uses the targeted hashing algorithm. That request is completely valid and the Certificate Authority issues an X.509 certificate to the adversary which is signed with its private key.</p></li></ol></div><div><h3>Exploit</h3><ol><li> <p> <b>Insert Signed Blob into Unsigned Certificate: </b>The adversary takes the signed blob and inserts it into the second X.509 certificate that the attacker generated. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob is valid in the second certificate. The result is two certificates that appear to be signed by a valid certificate authority despite only one having been signed.</p></li></ol></div>",
            "x_capec_extended_description": "\n            <xhtml:p>Alternatively, the second certificate could be a signing certificate. Thus the adversary is able to start their own Certification Authority that is anchored in its root of trust in the legitimate Certification Authority that has signed the attacker's first X.509 certificate. If the original Certificate Authority was accepted by default by browsers, so will the Certificate Authority set up by the adversary and any certificates that it signs. As a result, the adversary is able to generate any SSL certificates to impersonate any web server, and the user's browser will not issue any warning to the victim. This can be used to compromise HTTPS communications and other types of systems where PKI and X.509 certificates may be used (e.g., VPN, IPSec).</xhtml:p>\n         ",
            "x_capec_likelihood_of_attack": "Medium",
            "x_capec_prerequisites": [
                "Certification Authority is using a hash function with insufficient collision resistance to generate the certificate hash to be signed"
            ],
            "x_capec_resources_required": [
                "Knowledge of a certificate authority that uses hashing algorithms with poor collision resistance",
                "A valid certificate request and a malicious certificate request with identical hash values"
            ],
            "x_capec_skills_required": {
                "High": "An attacker must be able to craft two X.509 certificates that produce the same hash value",
                "Medium": "Knowledge needed to set up a certification authority"
            },
            "x_capec_status": "Draft",
            "x_capec_typical_severity": "Very High",
            "x_capec_version": "3.9"
        }
    ],
    "spec_version": "2.0",
    "type": "bundle"
}